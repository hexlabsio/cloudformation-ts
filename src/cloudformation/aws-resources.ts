export const resources = {
amzn : {
sdc : {
deployment : { load: async () => (await import('../amzn/sdc/Deployment')).deployment }}},
aws : {
acmpca : {
certificate : { load: async () => (await import('../aws/acmpca/Certificate')).certificate },certificateAuthority : { load: async () => (await import('../aws/acmpca/CertificateAuthority')).certificateAuthority },certificateAuthorityActivation : { load: async () => (await import('../aws/acmpca/CertificateAuthorityActivation')).certificateAuthorityActivation },permission : { load: async () => (await import('../aws/acmpca/Permission')).permission }},
aps : {
ruleGroupsNamespace : { load: async () => (await import('../aws/aps/RuleGroupsNamespace')).ruleGroupsNamespace },workspace : { load: async () => (await import('../aws/aps/Workspace')).workspace }},
accessanalyzer : {
analyzer : { load: async () => (await import('../aws/accessanalyzer/Analyzer')).analyzer }},
amazonmq : {
broker : { load: async () => (await import('../aws/amazonmq/Broker')).broker },configuration : { load: async () => (await import('../aws/amazonmq/Configuration')).configuration },configurationAssociation : { load: async () => (await import('../aws/amazonmq/ConfigurationAssociation')).configurationAssociation }},
amplify : {
app : { load: async () => (await import('../aws/amplify/App')).app },branch : { load: async () => (await import('../aws/amplify/Branch')).branch },domain : { load: async () => (await import('../aws/amplify/Domain')).domain }},
amplifyuibuilder : {
component : { load: async () => (await import('../aws/amplifyuibuilder/Component')).component },form : { load: async () => (await import('../aws/amplifyuibuilder/Form')).form },theme : { load: async () => (await import('../aws/amplifyuibuilder/Theme')).theme }},
apigateway : {
account : { load: async () => (await import('../aws/apigateway/Account')).account },apiKey : { load: async () => (await import('../aws/apigateway/ApiKey')).apiKey },authorizer : { load: async () => (await import('../aws/apigateway/Authorizer')).authorizer },basePathMapping : { load: async () => (await import('../aws/apigateway/BasePathMapping')).basePathMapping },clientCertificate : { load: async () => (await import('../aws/apigateway/ClientCertificate')).clientCertificate },deployment : { load: async () => (await import('../aws/apigateway/Deployment')).deployment },documentationPart : { load: async () => (await import('../aws/apigateway/DocumentationPart')).documentationPart },documentationVersion : { load: async () => (await import('../aws/apigateway/DocumentationVersion')).documentationVersion },domainName : { load: async () => (await import('../aws/apigateway/DomainName')).domainName },gatewayResponse : { load: async () => (await import('../aws/apigateway/GatewayResponse')).gatewayResponse },method : { load: async () => (await import('../aws/apigateway/Method')).method },model : { load: async () => (await import('../aws/apigateway/Model')).model },requestValidator : { load: async () => (await import('../aws/apigateway/RequestValidator')).requestValidator },resource : { load: async () => (await import('../aws/apigateway/Resource')).resource },restApi : { load: async () => (await import('../aws/apigateway/RestApi')).restApi },stage : { load: async () => (await import('../aws/apigateway/Stage')).stage },usagePlan : { load: async () => (await import('../aws/apigateway/UsagePlan')).usagePlan },usagePlanKey : { load: async () => (await import('../aws/apigateway/UsagePlanKey')).usagePlanKey },vpcLink : { load: async () => (await import('../aws/apigateway/VpcLink')).vpcLink }},
apigatewayv2 : {
api : { load: async () => (await import('../aws/apigatewayv2/Api')).api },apiGatewayManagedOverrides : { load: async () => (await import('../aws/apigatewayv2/ApiGatewayManagedOverrides')).apiGatewayManagedOverrides },apiMapping : { load: async () => (await import('../aws/apigatewayv2/ApiMapping')).apiMapping },authorizer : { load: async () => (await import('../aws/apigatewayv2/Authorizer')).authorizer },deployment : { load: async () => (await import('../aws/apigatewayv2/Deployment')).deployment },domainName : { load: async () => (await import('../aws/apigatewayv2/DomainName')).domainName },integration : { load: async () => (await import('../aws/apigatewayv2/Integration')).integration },integrationResponse : { load: async () => (await import('../aws/apigatewayv2/IntegrationResponse')).integrationResponse },model : { load: async () => (await import('../aws/apigatewayv2/Model')).model },route : { load: async () => (await import('../aws/apigatewayv2/Route')).route },routeResponse : { load: async () => (await import('../aws/apigatewayv2/RouteResponse')).routeResponse },stage : { load: async () => (await import('../aws/apigatewayv2/Stage')).stage },vpcLink : { load: async () => (await import('../aws/apigatewayv2/VpcLink')).vpcLink }},
appconfig : {
application : { load: async () => (await import('../aws/appconfig/Application')).application },configurationProfile : { load: async () => (await import('../aws/appconfig/ConfigurationProfile')).configurationProfile },deployment : { load: async () => (await import('../aws/appconfig/Deployment')).deployment },deploymentStrategy : { load: async () => (await import('../aws/appconfig/DeploymentStrategy')).deploymentStrategy },environment : { load: async () => (await import('../aws/appconfig/Environment')).environment },extension : { load: async () => (await import('../aws/appconfig/Extension')).extension },extensionAssociation : { load: async () => (await import('../aws/appconfig/ExtensionAssociation')).extensionAssociation },hostedConfigurationVersion : { load: async () => (await import('../aws/appconfig/HostedConfigurationVersion')).hostedConfigurationVersion }},
appflow : {
connector : { load: async () => (await import('../aws/appflow/Connector')).connector },connectorProfile : { load: async () => (await import('../aws/appflow/ConnectorProfile')).connectorProfile },flow : { load: async () => (await import('../aws/appflow/Flow')).flow }},
appmesh : {
gatewayRoute : { load: async () => (await import('../aws/appmesh/GatewayRoute')).gatewayRoute },mesh : { load: async () => (await import('../aws/appmesh/Mesh')).mesh },route : { load: async () => (await import('../aws/appmesh/Route')).route },virtualGateway : { load: async () => (await import('../aws/appmesh/VirtualGateway')).virtualGateway },virtualNode : { load: async () => (await import('../aws/appmesh/VirtualNode')).virtualNode },virtualRouter : { load: async () => (await import('../aws/appmesh/VirtualRouter')).virtualRouter },virtualService : { load: async () => (await import('../aws/appmesh/VirtualService')).virtualService }},
apprunner : {
autoScalingConfiguration : { load: async () => (await import('../aws/apprunner/AutoScalingConfiguration')).autoScalingConfiguration },observabilityConfiguration : { load: async () => (await import('../aws/apprunner/ObservabilityConfiguration')).observabilityConfiguration },service : { load: async () => (await import('../aws/apprunner/Service')).service },vpcConnector : { load: async () => (await import('../aws/apprunner/VpcConnector')).vpcConnector },vpcIngressConnection : { load: async () => (await import('../aws/apprunner/VpcIngressConnection')).vpcIngressConnection }},
appstream : {
appBlock : { load: async () => (await import('../aws/appstream/AppBlock')).appBlock },appBlockBuilder : { load: async () => (await import('../aws/appstream/AppBlockBuilder')).appBlockBuilder },application : { load: async () => (await import('../aws/appstream/Application')).application },applicationEntitlementAssociation : { load: async () => (await import('../aws/appstream/ApplicationEntitlementAssociation')).applicationEntitlementAssociation },applicationFleetAssociation : { load: async () => (await import('../aws/appstream/ApplicationFleetAssociation')).applicationFleetAssociation },directoryConfig : { load: async () => (await import('../aws/appstream/DirectoryConfig')).directoryConfig },entitlement : { load: async () => (await import('../aws/appstream/Entitlement')).entitlement },fleet : { load: async () => (await import('../aws/appstream/Fleet')).fleet },imageBuilder : { load: async () => (await import('../aws/appstream/ImageBuilder')).imageBuilder },stack : { load: async () => (await import('../aws/appstream/Stack')).stack },stackFleetAssociation : { load: async () => (await import('../aws/appstream/StackFleetAssociation')).stackFleetAssociation },stackUserAssociation : { load: async () => (await import('../aws/appstream/StackUserAssociation')).stackUserAssociation },user : { load: async () => (await import('../aws/appstream/User')).user }},
appsync : {
apiCache : { load: async () => (await import('../aws/appsync/ApiCache')).apiCache },apiKey : { load: async () => (await import('../aws/appsync/ApiKey')).apiKey },dataSource : { load: async () => (await import('../aws/appsync/DataSource')).dataSource },domainName : { load: async () => (await import('../aws/appsync/DomainName')).domainName },domainNameApiAssociation : { load: async () => (await import('../aws/appsync/DomainNameApiAssociation')).domainNameApiAssociation },functionConfiguration : { load: async () => (await import('../aws/appsync/FunctionConfiguration')).functionConfiguration },graphQLApi : { load: async () => (await import('../aws/appsync/GraphQLApi')).graphQLApi },graphQLSchema : { load: async () => (await import('../aws/appsync/GraphQLSchema')).graphQLSchema },resolver : { load: async () => (await import('../aws/appsync/Resolver')).resolver },sourceApiAssociation : { load: async () => (await import('../aws/appsync/SourceApiAssociation')).sourceApiAssociation }},
applicationautoscaling : {
scalableTarget : { load: async () => (await import('../aws/applicationautoscaling/ScalableTarget')).scalableTarget },scalingPolicy : { load: async () => (await import('../aws/applicationautoscaling/ScalingPolicy')).scalingPolicy }},
applicationinsights : {
application : { load: async () => (await import('../aws/applicationinsights/Application')).application }},
athena : {
capacityReservation : { load: async () => (await import('../aws/athena/CapacityReservation')).capacityReservation },dataCatalog : { load: async () => (await import('../aws/athena/DataCatalog')).dataCatalog },namedQuery : { load: async () => (await import('../aws/athena/NamedQuery')).namedQuery },preparedStatement : { load: async () => (await import('../aws/athena/PreparedStatement')).preparedStatement },workGroup : { load: async () => (await import('../aws/athena/WorkGroup')).workGroup }},
auditmanager : {
assessment : { load: async () => (await import('../aws/auditmanager/Assessment')).assessment }},
autoscaling : {
autoScalingGroup : { load: async () => (await import('../aws/autoscaling/AutoScalingGroup')).autoScalingGroup },launchConfiguration : { load: async () => (await import('../aws/autoscaling/LaunchConfiguration')).launchConfiguration },lifecycleHook : { load: async () => (await import('../aws/autoscaling/LifecycleHook')).lifecycleHook },scalingPolicy : { load: async () => (await import('../aws/autoscaling/ScalingPolicy')).scalingPolicy },scheduledAction : { load: async () => (await import('../aws/autoscaling/ScheduledAction')).scheduledAction },warmPool : { load: async () => (await import('../aws/autoscaling/WarmPool')).warmPool }},
autoscalingplans : {
scalingPlan : { load: async () => (await import('../aws/autoscalingplans/ScalingPlan')).scalingPlan }},
backup : {
backupPlan : { load: async () => (await import('../aws/backup/BackupPlan')).backupPlan },backupSelection : { load: async () => (await import('../aws/backup/BackupSelection')).backupSelection },backupVault : { load: async () => (await import('../aws/backup/BackupVault')).backupVault },framework : { load: async () => (await import('../aws/backup/Framework')).framework },reportPlan : { load: async () => (await import('../aws/backup/ReportPlan')).reportPlan }},
backupgateway : {
hypervisor : { load: async () => (await import('../aws/backupgateway/Hypervisor')).hypervisor }},
batch : {
computeEnvironment : { load: async () => (await import('../aws/batch/ComputeEnvironment')).computeEnvironment },jobDefinition : { load: async () => (await import('../aws/batch/JobDefinition')).jobDefinition },jobQueue : { load: async () => (await import('../aws/batch/JobQueue')).jobQueue },schedulingPolicy : { load: async () => (await import('../aws/batch/SchedulingPolicy')).schedulingPolicy }},
budgets : {
budget : { load: async () => (await import('../aws/budgets/Budget')).budget },budgetsAction : { load: async () => (await import('../aws/budgets/BudgetsAction')).budgetsAction }},
ce : {
costCategory : { load: async () => (await import('../aws/ce/CostCategory')).costCategory }},
cassandra : {
keyspace : { load: async () => (await import('../aws/cassandra/Keyspace')).keyspace },table : { load: async () => (await import('../aws/cassandra/Table')).table }},
certificatemanager : {
account : { load: async () => (await import('../aws/certificatemanager/Account')).account },certificate : { load: async () => (await import('../aws/certificatemanager/Certificate')).certificate }},
chatbot : {
microsoftTeamsChannelConfiguration : { load: async () => (await import('../aws/chatbot/MicrosoftTeamsChannelConfiguration')).microsoftTeamsChannelConfiguration },slackChannelConfiguration : { load: async () => (await import('../aws/chatbot/SlackChannelConfiguration')).slackChannelConfiguration }},
cleanrooms : {
analysisTemplate : { load: async () => (await import('../aws/cleanrooms/AnalysisTemplate')).analysisTemplate },collaboration : { load: async () => (await import('../aws/cleanrooms/Collaboration')).collaboration },configuredTable : { load: async () => (await import('../aws/cleanrooms/ConfiguredTable')).configuredTable },configuredTableAssociation : { load: async () => (await import('../aws/cleanrooms/ConfiguredTableAssociation')).configuredTableAssociation },membership : { load: async () => (await import('../aws/cleanrooms/Membership')).membership }},
cloud9 : {
environmentEC2 : { load: async () => (await import('../aws/cloud9/EnvironmentEC2')).environmentEC2 }},
cloudformation : {
customResource : { load: async () => (await import('../aws/cloudformation/CustomResource')).customResource },hookDefaultVersion : { load: async () => (await import('../aws/cloudformation/HookDefaultVersion')).hookDefaultVersion },hookTypeConfig : { load: async () => (await import('../aws/cloudformation/HookTypeConfig')).hookTypeConfig },hookVersion : { load: async () => (await import('../aws/cloudformation/HookVersion')).hookVersion },macro : { load: async () => (await import('../aws/cloudformation/Macro')).macro },moduleDefaultVersion : { load: async () => (await import('../aws/cloudformation/ModuleDefaultVersion')).moduleDefaultVersion },moduleVersion : { load: async () => (await import('../aws/cloudformation/ModuleVersion')).moduleVersion },publicTypeVersion : { load: async () => (await import('../aws/cloudformation/PublicTypeVersion')).publicTypeVersion },publisher : { load: async () => (await import('../aws/cloudformation/Publisher')).publisher },resourceDefaultVersion : { load: async () => (await import('../aws/cloudformation/ResourceDefaultVersion')).resourceDefaultVersion },resourceVersion : { load: async () => (await import('../aws/cloudformation/ResourceVersion')).resourceVersion },stack : { load: async () => (await import('../aws/cloudformation/Stack')).stack },stackSet : { load: async () => (await import('../aws/cloudformation/StackSet')).stackSet },typeActivation : { load: async () => (await import('../aws/cloudformation/TypeActivation')).typeActivation },waitCondition : { load: async () => (await import('../aws/cloudformation/WaitCondition')).waitCondition },waitConditionHandle : { load: async () => (await import('../aws/cloudformation/WaitConditionHandle')).waitConditionHandle }},
cloudfront : {
cachePolicy : { load: async () => (await import('../aws/cloudfront/CachePolicy')).cachePolicy },cloudFrontOriginAccessIdentity : { load: async () => (await import('../aws/cloudfront/CloudFrontOriginAccessIdentity')).cloudFrontOriginAccessIdentity },continuousDeploymentPolicy : { load: async () => (await import('../aws/cloudfront/ContinuousDeploymentPolicy')).continuousDeploymentPolicy },distribution : { load: async () => (await import('../aws/cloudfront/Distribution')).distribution },createFunction : { load: async () => (await import('../aws/cloudfront/FunctionProp')).createFunction },keyGroup : { load: async () => (await import('../aws/cloudfront/KeyGroup')).keyGroup },monitoringSubscription : { load: async () => (await import('../aws/cloudfront/MonitoringSubscription')).monitoringSubscription },originAccessControl : { load: async () => (await import('../aws/cloudfront/OriginAccessControl')).originAccessControl },originRequestPolicy : { load: async () => (await import('../aws/cloudfront/OriginRequestPolicy')).originRequestPolicy },publicKey : { load: async () => (await import('../aws/cloudfront/PublicKey')).publicKey },realtimeLogConfig : { load: async () => (await import('../aws/cloudfront/RealtimeLogConfig')).realtimeLogConfig },responseHeadersPolicy : { load: async () => (await import('../aws/cloudfront/ResponseHeadersPolicy')).responseHeadersPolicy },streamingDistribution : { load: async () => (await import('../aws/cloudfront/StreamingDistribution')).streamingDistribution }},
cloudtrail : {
channel : { load: async () => (await import('../aws/cloudtrail/Channel')).channel },eventDataStore : { load: async () => (await import('../aws/cloudtrail/EventDataStore')).eventDataStore },resourcePolicy : { load: async () => (await import('../aws/cloudtrail/ResourcePolicy')).resourcePolicy },trail : { load: async () => (await import('../aws/cloudtrail/Trail')).trail }},
cloudwatch : {
alarm : { load: async () => (await import('../aws/cloudwatch/Alarm')).alarm },anomalyDetector : { load: async () => (await import('../aws/cloudwatch/AnomalyDetector')).anomalyDetector },compositeAlarm : { load: async () => (await import('../aws/cloudwatch/CompositeAlarm')).compositeAlarm },dashboard : { load: async () => (await import('../aws/cloudwatch/Dashboard')).dashboard },insightRule : { load: async () => (await import('../aws/cloudwatch/InsightRule')).insightRule },metricStream : { load: async () => (await import('../aws/cloudwatch/MetricStream')).metricStream }},
codeartifact : {
domain : { load: async () => (await import('../aws/codeartifact/Domain')).domain },repository : { load: async () => (await import('../aws/codeartifact/Repository')).repository }},
codebuild : {
project : { load: async () => (await import('../aws/codebuild/Project')).project },reportGroup : { load: async () => (await import('../aws/codebuild/ReportGroup')).reportGroup },sourceCredential : { load: async () => (await import('../aws/codebuild/SourceCredential')).sourceCredential }},
codecommit : {
repository : { load: async () => (await import('../aws/codecommit/Repository')).repository }},
codedeploy : {
application : { load: async () => (await import('../aws/codedeploy/Application')).application },deploymentConfig : { load: async () => (await import('../aws/codedeploy/DeploymentConfig')).deploymentConfig },deploymentGroup : { load: async () => (await import('../aws/codedeploy/DeploymentGroup')).deploymentGroup }},
codeguruprofiler : {
profilingGroup : { load: async () => (await import('../aws/codeguruprofiler/ProfilingGroup')).profilingGroup }},
codegurureviewer : {
repositoryAssociation : { load: async () => (await import('../aws/codegurureviewer/RepositoryAssociation')).repositoryAssociation }},
codepipeline : {
customActionType : { load: async () => (await import('../aws/codepipeline/CustomActionType')).customActionType },pipeline : { load: async () => (await import('../aws/codepipeline/Pipeline')).pipeline },webhook : { load: async () => (await import('../aws/codepipeline/Webhook')).webhook }},
codestar : {
gitHubRepository : { load: async () => (await import('../aws/codestar/GitHubRepository')).gitHubRepository }},
codestarconnections : {
connection : { load: async () => (await import('../aws/codestarconnections/Connection')).connection }},
codestarnotifications : {
notificationRule : { load: async () => (await import('../aws/codestarnotifications/NotificationRule')).notificationRule }},
codetest : {
persistentConfiguration : { load: async () => (await import('../aws/codetest/PersistentConfiguration')).persistentConfiguration },series : { load: async () => (await import('../aws/codetest/Series')).series }},
cognito : {
identityPool : { load: async () => (await import('../aws/cognito/IdentityPool')).identityPool },identityPoolPrincipalTag : { load: async () => (await import('../aws/cognito/IdentityPoolPrincipalTag')).identityPoolPrincipalTag },identityPoolRoleAttachment : { load: async () => (await import('../aws/cognito/IdentityPoolRoleAttachment')).identityPoolRoleAttachment },logDeliveryConfiguration : { load: async () => (await import('../aws/cognito/LogDeliveryConfiguration')).logDeliveryConfiguration },userPool : { load: async () => (await import('../aws/cognito/UserPool')).userPool },userPoolClient : { load: async () => (await import('../aws/cognito/UserPoolClient')).userPoolClient },userPoolDomain : { load: async () => (await import('../aws/cognito/UserPoolDomain')).userPoolDomain },userPoolGroup : { load: async () => (await import('../aws/cognito/UserPoolGroup')).userPoolGroup },userPoolIdentityProvider : { load: async () => (await import('../aws/cognito/UserPoolIdentityProvider')).userPoolIdentityProvider },userPoolResourceServer : { load: async () => (await import('../aws/cognito/UserPoolResourceServer')).userPoolResourceServer },userPoolRiskConfigurationAttachment : { load: async () => (await import('../aws/cognito/UserPoolRiskConfigurationAttachment')).userPoolRiskConfigurationAttachment },userPoolUICustomizationAttachment : { load: async () => (await import('../aws/cognito/UserPoolUICustomizationAttachment')).userPoolUICustomizationAttachment },userPoolUser : { load: async () => (await import('../aws/cognito/UserPoolUser')).userPoolUser },userPoolUserToGroupAttachment : { load: async () => (await import('../aws/cognito/UserPoolUserToGroupAttachment')).userPoolUserToGroupAttachment }},
comprehend : {
documentClassifier : { load: async () => (await import('../aws/comprehend/DocumentClassifier')).documentClassifier },flywheel : { load: async () => (await import('../aws/comprehend/Flywheel')).flywheel }},
config : {
aggregationAuthorization : { load: async () => (await import('../aws/config/AggregationAuthorization')).aggregationAuthorization },configRule : { load: async () => (await import('../aws/config/ConfigRule')).configRule },configurationAggregator : { load: async () => (await import('../aws/config/ConfigurationAggregator')).configurationAggregator },configurationRecorder : { load: async () => (await import('../aws/config/ConfigurationRecorder')).configurationRecorder },conformancePack : { load: async () => (await import('../aws/config/ConformancePack')).conformancePack },deliveryChannel : { load: async () => (await import('../aws/config/DeliveryChannel')).deliveryChannel },organizationConfigRule : { load: async () => (await import('../aws/config/OrganizationConfigRule')).organizationConfigRule },organizationConformancePack : { load: async () => (await import('../aws/config/OrganizationConformancePack')).organizationConformancePack },remediationConfiguration : { load: async () => (await import('../aws/config/RemediationConfiguration')).remediationConfiguration },storedQuery : { load: async () => (await import('../aws/config/StoredQuery')).storedQuery }},
controltower : {
enabledControl : { load: async () => (await import('../aws/controltower/EnabledControl')).enabledControl }},
dax : {
cluster : { load: async () => (await import('../aws/dax/Cluster')).cluster },parameterGroup : { load: async () => (await import('../aws/dax/ParameterGroup')).parameterGroup },subnetGroup : { load: async () => (await import('../aws/dax/SubnetGroup')).subnetGroup }},
dlm : {
lifecyclePolicy : { load: async () => (await import('../aws/dlm/LifecyclePolicy')).lifecyclePolicy }},
dms : {
certificate : { load: async () => (await import('../aws/dms/Certificate')).certificate },endpoint : { load: async () => (await import('../aws/dms/Endpoint')).endpoint },eventSubscription : { load: async () => (await import('../aws/dms/EventSubscription')).eventSubscription },replicationConfig : { load: async () => (await import('../aws/dms/ReplicationConfig')).replicationConfig },replicationInstance : { load: async () => (await import('../aws/dms/ReplicationInstance')).replicationInstance },replicationSubnetGroup : { load: async () => (await import('../aws/dms/ReplicationSubnetGroup')).replicationSubnetGroup },replicationTask : { load: async () => (await import('../aws/dms/ReplicationTask')).replicationTask }},
databrew : {
dataset : { load: async () => (await import('../aws/databrew/Dataset')).dataset },job : { load: async () => (await import('../aws/databrew/Job')).job },project : { load: async () => (await import('../aws/databrew/Project')).project },recipe : { load: async () => (await import('../aws/databrew/Recipe')).recipe },ruleset : { load: async () => (await import('../aws/databrew/Ruleset')).ruleset },schedule : { load: async () => (await import('../aws/databrew/Schedule')).schedule }},
datapipeline : {
pipeline : { load: async () => (await import('../aws/datapipeline/Pipeline')).pipeline }},
datasync : {
agent : { load: async () => (await import('../aws/datasync/Agent')).agent },locationAzureBlob : { load: async () => (await import('../aws/datasync/LocationAzureBlob')).locationAzureBlob },locationEFS : { load: async () => (await import('../aws/datasync/LocationEFS')).locationEFS },locationFSxLustre : { load: async () => (await import('../aws/datasync/LocationFSxLustre')).locationFSxLustre },locationFSxONTAP : { load: async () => (await import('../aws/datasync/LocationFSxONTAP')).locationFSxONTAP },locationFSxOpenZFS : { load: async () => (await import('../aws/datasync/LocationFSxOpenZFS')).locationFSxOpenZFS },locationFSxWindows : { load: async () => (await import('../aws/datasync/LocationFSxWindows')).locationFSxWindows },locationHDFS : { load: async () => (await import('../aws/datasync/LocationHDFS')).locationHDFS },locationNFS : { load: async () => (await import('../aws/datasync/LocationNFS')).locationNFS },locationObjectStorage : { load: async () => (await import('../aws/datasync/LocationObjectStorage')).locationObjectStorage },locationS3 : { load: async () => (await import('../aws/datasync/LocationS3')).locationS3 },locationSMB : { load: async () => (await import('../aws/datasync/LocationSMB')).locationSMB },storageSystem : { load: async () => (await import('../aws/datasync/StorageSystem')).storageSystem },task : { load: async () => (await import('../aws/datasync/Task')).task }},
detective : {
graph : { load: async () => (await import('../aws/detective/Graph')).graph },memberInvitation : { load: async () => (await import('../aws/detective/MemberInvitation')).memberInvitation },organizationAdmin : { load: async () => (await import('../aws/detective/OrganizationAdmin')).organizationAdmin }},
devopsguru : {
logAnomalyDetectionIntegration : { load: async () => (await import('../aws/devopsguru/LogAnomalyDetectionIntegration')).logAnomalyDetectionIntegration },notificationChannel : { load: async () => (await import('../aws/devopsguru/NotificationChannel')).notificationChannel },resourceCollection : { load: async () => (await import('../aws/devopsguru/ResourceCollection')).resourceCollection }},
directoryservice : {
microsoftAD : { load: async () => (await import('../aws/directoryservice/MicrosoftAD')).microsoftAD },simpleAD : { load: async () => (await import('../aws/directoryservice/SimpleAD')).simpleAD }},
docdb : {
dBCluster : { load: async () => (await import('../aws/docdb/DBCluster')).dBCluster },dBClusterParameterGroup : { load: async () => (await import('../aws/docdb/DBClusterParameterGroup')).dBClusterParameterGroup },dBInstance : { load: async () => (await import('../aws/docdb/DBInstance')).dBInstance },dBSubnetGroup : { load: async () => (await import('../aws/docdb/DBSubnetGroup')).dBSubnetGroup }},
docdbelastic : {
cluster : { load: async () => (await import('../aws/docdbelastic/Cluster')).cluster }},
dynamodb : {
globalTable : { load: async () => (await import('../aws/dynamodb/GlobalTable')).globalTable },table : { load: async () => (await import('../aws/dynamodb/Table')).table }},
ec2 : {
capacityReservation : { load: async () => (await import('../aws/ec2/CapacityReservation')).capacityReservation },capacityReservationFleet : { load: async () => (await import('../aws/ec2/CapacityReservationFleet')).capacityReservationFleet },carrierGateway : { load: async () => (await import('../aws/ec2/CarrierGateway')).carrierGateway },clientVpnAuthorizationRule : { load: async () => (await import('../aws/ec2/ClientVpnAuthorizationRule')).clientVpnAuthorizationRule },clientVpnEndpoint : { load: async () => (await import('../aws/ec2/ClientVpnEndpoint')).clientVpnEndpoint },clientVpnRoute : { load: async () => (await import('../aws/ec2/ClientVpnRoute')).clientVpnRoute },clientVpnTargetNetworkAssociation : { load: async () => (await import('../aws/ec2/ClientVpnTargetNetworkAssociation')).clientVpnTargetNetworkAssociation },customerGateway : { load: async () => (await import('../aws/ec2/CustomerGateway')).customerGateway },dHCPOptions : { load: async () => (await import('../aws/ec2/DHCPOptions')).dHCPOptions },eC2Fleet : { load: async () => (await import('../aws/ec2/EC2Fleet')).eC2Fleet },eIP : { load: async () => (await import('../aws/ec2/EIP')).eIP },eIPAssociation : { load: async () => (await import('../aws/ec2/EIPAssociation')).eIPAssociation },egressOnlyInternetGateway : { load: async () => (await import('../aws/ec2/EgressOnlyInternetGateway')).egressOnlyInternetGateway },enclaveCertificateIamRoleAssociation : { load: async () => (await import('../aws/ec2/EnclaveCertificateIamRoleAssociation')).enclaveCertificateIamRoleAssociation },flowLog : { load: async () => (await import('../aws/ec2/FlowLog')).flowLog },gatewayRouteTableAssociation : { load: async () => (await import('../aws/ec2/GatewayRouteTableAssociation')).gatewayRouteTableAssociation },host : { load: async () => (await import('../aws/ec2/Host')).host },iPAM : { load: async () => (await import('../aws/ec2/IPAM')).iPAM },iPAMAllocation : { load: async () => (await import('../aws/ec2/IPAMAllocation')).iPAMAllocation },iPAMPool : { load: async () => (await import('../aws/ec2/IPAMPool')).iPAMPool },iPAMPoolCidr : { load: async () => (await import('../aws/ec2/IPAMPoolCidr')).iPAMPoolCidr },iPAMResourceDiscovery : { load: async () => (await import('../aws/ec2/IPAMResourceDiscovery')).iPAMResourceDiscovery },iPAMResourceDiscoveryAssociation : { load: async () => (await import('../aws/ec2/IPAMResourceDiscoveryAssociation')).iPAMResourceDiscoveryAssociation },iPAMScope : { load: async () => (await import('../aws/ec2/IPAMScope')).iPAMScope },instance : { load: async () => (await import('../aws/ec2/Instance')).instance },instanceConnectEndpoint : { load: async () => (await import('../aws/ec2/InstanceConnectEndpoint')).instanceConnectEndpoint },internetGateway : { load: async () => (await import('../aws/ec2/InternetGateway')).internetGateway },keyPair : { load: async () => (await import('../aws/ec2/KeyPair')).keyPair },launchTemplate : { load: async () => (await import('../aws/ec2/LaunchTemplate')).launchTemplate },localGatewayRoute : { load: async () => (await import('../aws/ec2/LocalGatewayRoute')).localGatewayRoute },localGatewayRouteTable : { load: async () => (await import('../aws/ec2/LocalGatewayRouteTable')).localGatewayRouteTable },localGatewayRouteTableVPCAssociation : { load: async () => (await import('../aws/ec2/LocalGatewayRouteTableVPCAssociation')).localGatewayRouteTableVPCAssociation },localGatewayRouteTableVirtualInterfaceGroupAssociation : { load: async () => (await import('../aws/ec2/LocalGatewayRouteTableVirtualInterfaceGroupAssociation')).localGatewayRouteTableVirtualInterfaceGroupAssociation },natGateway : { load: async () => (await import('../aws/ec2/NatGateway')).natGateway },networkAcl : { load: async () => (await import('../aws/ec2/NetworkAcl')).networkAcl },networkAclEntry : { load: async () => (await import('../aws/ec2/NetworkAclEntry')).networkAclEntry },networkInsightsAccessScope : { load: async () => (await import('../aws/ec2/NetworkInsightsAccessScope')).networkInsightsAccessScope },networkInsightsAccessScopeAnalysis : { load: async () => (await import('../aws/ec2/NetworkInsightsAccessScopeAnalysis')).networkInsightsAccessScopeAnalysis },networkInsightsAnalysis : { load: async () => (await import('../aws/ec2/NetworkInsightsAnalysis')).networkInsightsAnalysis },networkInsightsPath : { load: async () => (await import('../aws/ec2/NetworkInsightsPath')).networkInsightsPath },networkInterface : { load: async () => (await import('../aws/ec2/NetworkInterface')).networkInterface },networkInterfaceAttachment : { load: async () => (await import('../aws/ec2/NetworkInterfaceAttachment')).networkInterfaceAttachment },networkInterfacePermission : { load: async () => (await import('../aws/ec2/NetworkInterfacePermission')).networkInterfacePermission },networkPerformanceMetricSubscription : { load: async () => (await import('../aws/ec2/NetworkPerformanceMetricSubscription')).networkPerformanceMetricSubscription },placementGroup : { load: async () => (await import('../aws/ec2/PlacementGroup')).placementGroup },prefixList : { load: async () => (await import('../aws/ec2/PrefixList')).prefixList },route : { load: async () => (await import('../aws/ec2/Route')).route },routeTable : { load: async () => (await import('../aws/ec2/RouteTable')).routeTable },securityGroup : { load: async () => (await import('../aws/ec2/SecurityGroup')).securityGroup },securityGroupEgress : { load: async () => (await import('../aws/ec2/SecurityGroupEgress')).securityGroupEgress },securityGroupIngress : { load: async () => (await import('../aws/ec2/SecurityGroupIngress')).securityGroupIngress },spotFleet : { load: async () => (await import('../aws/ec2/SpotFleet')).spotFleet },subnet : { load: async () => (await import('../aws/ec2/Subnet')).subnet },subnetCidrBlock : { load: async () => (await import('../aws/ec2/SubnetCidrBlock')).subnetCidrBlock },subnetNetworkAclAssociation : { load: async () => (await import('../aws/ec2/SubnetNetworkAclAssociation')).subnetNetworkAclAssociation },subnetRouteTableAssociation : { load: async () => (await import('../aws/ec2/SubnetRouteTableAssociation')).subnetRouteTableAssociation },trafficMirrorFilter : { load: async () => (await import('../aws/ec2/TrafficMirrorFilter')).trafficMirrorFilter },trafficMirrorFilterRule : { load: async () => (await import('../aws/ec2/TrafficMirrorFilterRule')).trafficMirrorFilterRule },trafficMirrorSession : { load: async () => (await import('../aws/ec2/TrafficMirrorSession')).trafficMirrorSession },trafficMirrorTarget : { load: async () => (await import('../aws/ec2/TrafficMirrorTarget')).trafficMirrorTarget },transitGateway : { load: async () => (await import('../aws/ec2/TransitGateway')).transitGateway },transitGatewayAttachment : { load: async () => (await import('../aws/ec2/TransitGatewayAttachment')).transitGatewayAttachment },transitGatewayConnect : { load: async () => (await import('../aws/ec2/TransitGatewayConnect')).transitGatewayConnect },transitGatewayMulticastDomain : { load: async () => (await import('../aws/ec2/TransitGatewayMulticastDomain')).transitGatewayMulticastDomain },transitGatewayMulticastDomainAssociation : { load: async () => (await import('../aws/ec2/TransitGatewayMulticastDomainAssociation')).transitGatewayMulticastDomainAssociation },transitGatewayMulticastGroupMember : { load: async () => (await import('../aws/ec2/TransitGatewayMulticastGroupMember')).transitGatewayMulticastGroupMember },transitGatewayMulticastGroupSource : { load: async () => (await import('../aws/ec2/TransitGatewayMulticastGroupSource')).transitGatewayMulticastGroupSource },transitGatewayPeeringAttachment : { load: async () => (await import('../aws/ec2/TransitGatewayPeeringAttachment')).transitGatewayPeeringAttachment },transitGatewayRoute : { load: async () => (await import('../aws/ec2/TransitGatewayRoute')).transitGatewayRoute },transitGatewayRouteTable : { load: async () => (await import('../aws/ec2/TransitGatewayRouteTable')).transitGatewayRouteTable },transitGatewayRouteTableAssociation : { load: async () => (await import('../aws/ec2/TransitGatewayRouteTableAssociation')).transitGatewayRouteTableAssociation },transitGatewayRouteTablePropagation : { load: async () => (await import('../aws/ec2/TransitGatewayRouteTablePropagation')).transitGatewayRouteTablePropagation },transitGatewayVpcAttachment : { load: async () => (await import('../aws/ec2/TransitGatewayVpcAttachment')).transitGatewayVpcAttachment },vPC : { load: async () => (await import('../aws/ec2/VPC')).vPC },vPCCidrBlock : { load: async () => (await import('../aws/ec2/VPCCidrBlock')).vPCCidrBlock },vPCDHCPOptionsAssociation : { load: async () => (await import('../aws/ec2/VPCDHCPOptionsAssociation')).vPCDHCPOptionsAssociation },vPCEndpoint : { load: async () => (await import('../aws/ec2/VPCEndpoint')).vPCEndpoint },vPCEndpointConnectionNotification : { load: async () => (await import('../aws/ec2/VPCEndpointConnectionNotification')).vPCEndpointConnectionNotification },vPCEndpointService : { load: async () => (await import('../aws/ec2/VPCEndpointService')).vPCEndpointService },vPCEndpointServicePermissions : { load: async () => (await import('../aws/ec2/VPCEndpointServicePermissions')).vPCEndpointServicePermissions },vPCGatewayAttachment : { load: async () => (await import('../aws/ec2/VPCGatewayAttachment')).vPCGatewayAttachment },vPCPeeringConnection : { load: async () => (await import('../aws/ec2/VPCPeeringConnection')).vPCPeeringConnection },vPNConnection : { load: async () => (await import('../aws/ec2/VPNConnection')).vPNConnection },vPNConnectionRoute : { load: async () => (await import('../aws/ec2/VPNConnectionRoute')).vPNConnectionRoute },vPNGateway : { load: async () => (await import('../aws/ec2/VPNGateway')).vPNGateway },vPNGatewayRoutePropagation : { load: async () => (await import('../aws/ec2/VPNGatewayRoutePropagation')).vPNGatewayRoutePropagation },verifiedAccessEndpoint : { load: async () => (await import('../aws/ec2/VerifiedAccessEndpoint')).verifiedAccessEndpoint },verifiedAccessGroup : { load: async () => (await import('../aws/ec2/VerifiedAccessGroup')).verifiedAccessGroup },verifiedAccessInstance : { load: async () => (await import('../aws/ec2/VerifiedAccessInstance')).verifiedAccessInstance },verifiedAccessTrustProvider : { load: async () => (await import('../aws/ec2/VerifiedAccessTrustProvider')).verifiedAccessTrustProvider },volume : { load: async () => (await import('../aws/ec2/Volume')).volume },volumeAttachment : { load: async () => (await import('../aws/ec2/VolumeAttachment')).volumeAttachment }},
ecr : {
pullThroughCacheRule : { load: async () => (await import('../aws/ecr/PullThroughCacheRule')).pullThroughCacheRule },registryPolicy : { load: async () => (await import('../aws/ecr/RegistryPolicy')).registryPolicy },replicationConfiguration : { load: async () => (await import('../aws/ecr/ReplicationConfiguration')).replicationConfiguration },repository : { load: async () => (await import('../aws/ecr/Repository')).repository }},
ecs : {
capacityProvider : { load: async () => (await import('../aws/ecs/CapacityProvider')).capacityProvider },cluster : { load: async () => (await import('../aws/ecs/Cluster')).cluster },clusterCapacityProviderAssociations : { load: async () => (await import('../aws/ecs/ClusterCapacityProviderAssociations')).clusterCapacityProviderAssociations },primaryTaskSet : { load: async () => (await import('../aws/ecs/PrimaryTaskSet')).primaryTaskSet },service : { load: async () => (await import('../aws/ecs/Service')).service },taskDefinition : { load: async () => (await import('../aws/ecs/TaskDefinition')).taskDefinition },taskSet : { load: async () => (await import('../aws/ecs/TaskSet')).taskSet }},
efs : {
accessPoint : { load: async () => (await import('../aws/efs/AccessPoint')).accessPoint },fileSystem : { load: async () => (await import('../aws/efs/FileSystem')).fileSystem },mountTarget : { load: async () => (await import('../aws/efs/MountTarget')).mountTarget }},
eks : {
addon : { load: async () => (await import('../aws/eks/Addon')).addon },cluster : { load: async () => (await import('../aws/eks/Cluster')).cluster },fargateProfile : { load: async () => (await import('../aws/eks/FargateProfile')).fargateProfile },identityProviderConfig : { load: async () => (await import('../aws/eks/IdentityProviderConfig')).identityProviderConfig },nodegroup : { load: async () => (await import('../aws/eks/Nodegroup')).nodegroup }},
emr : {
cluster : { load: async () => (await import('../aws/emr/Cluster')).cluster },instanceFleetConfig : { load: async () => (await import('../aws/emr/InstanceFleetConfig')).instanceFleetConfig },instanceGroupConfig : { load: async () => (await import('../aws/emr/InstanceGroupConfig')).instanceGroupConfig },securityConfiguration : { load: async () => (await import('../aws/emr/SecurityConfiguration')).securityConfiguration },step : { load: async () => (await import('../aws/emr/Step')).step },studio : { load: async () => (await import('../aws/emr/Studio')).studio },studioSessionMapping : { load: async () => (await import('../aws/emr/StudioSessionMapping')).studioSessionMapping },wALWorkspace : { load: async () => (await import('../aws/emr/WALWorkspace')).wALWorkspace }},
emrcontainers : {
virtualCluster : { load: async () => (await import('../aws/emrcontainers/VirtualCluster')).virtualCluster }},
emrserverless : {
application : { load: async () => (await import('../aws/emrserverless/Application')).application }},
elasticache : {
cacheCluster : { load: async () => (await import('../aws/elasticache/CacheCluster')).cacheCluster },globalReplicationGroup : { load: async () => (await import('../aws/elasticache/GlobalReplicationGroup')).globalReplicationGroup },parameterGroup : { load: async () => (await import('../aws/elasticache/ParameterGroup')).parameterGroup },replicationGroup : { load: async () => (await import('../aws/elasticache/ReplicationGroup')).replicationGroup },securityGroup : { load: async () => (await import('../aws/elasticache/SecurityGroup')).securityGroup },securityGroupIngress : { load: async () => (await import('../aws/elasticache/SecurityGroupIngress')).securityGroupIngress },subnetGroup : { load: async () => (await import('../aws/elasticache/SubnetGroup')).subnetGroup },user : { load: async () => (await import('../aws/elasticache/User')).user },userGroup : { load: async () => (await import('../aws/elasticache/UserGroup')).userGroup }},
elasticbeanstalk : {
application : { load: async () => (await import('../aws/elasticbeanstalk/Application')).application },applicationVersion : { load: async () => (await import('../aws/elasticbeanstalk/ApplicationVersion')).applicationVersion },configurationTemplate : { load: async () => (await import('../aws/elasticbeanstalk/ConfigurationTemplate')).configurationTemplate },environment : { load: async () => (await import('../aws/elasticbeanstalk/Environment')).environment }},
elasticloadbalancing : {
loadBalancer : { load: async () => (await import('../aws/elasticloadbalancing/LoadBalancer')).loadBalancer }},
elasticloadbalancingv2 : {
listener : { load: async () => (await import('../aws/elasticloadbalancingv2/Listener')).listener },listenerCertificate : { load: async () => (await import('../aws/elasticloadbalancingv2/ListenerCertificate')).listenerCertificate },listenerRule : { load: async () => (await import('../aws/elasticloadbalancingv2/ListenerRule')).listenerRule },loadBalancer : { load: async () => (await import('../aws/elasticloadbalancingv2/LoadBalancer')).loadBalancer },targetGroup : { load: async () => (await import('../aws/elasticloadbalancingv2/TargetGroup')).targetGroup }},
elasticsearch : {
domain : { load: async () => (await import('../aws/elasticsearch/Domain')).domain }},
entityresolution : {
idMappingWorkflow : { load: async () => (await import('../aws/entityresolution/IdMappingWorkflow')).idMappingWorkflow },matchingWorkflow : { load: async () => (await import('../aws/entityresolution/MatchingWorkflow')).matchingWorkflow },schemaMapping : { load: async () => (await import('../aws/entityresolution/SchemaMapping')).schemaMapping }},
eventschemas : {
discoverer : { load: async () => (await import('../aws/eventschemas/Discoverer')).discoverer },registry : { load: async () => (await import('../aws/eventschemas/Registry')).registry },registryPolicy : { load: async () => (await import('../aws/eventschemas/RegistryPolicy')).registryPolicy },schema : { load: async () => (await import('../aws/eventschemas/Schema')).schema }},
events : {
apiDestination : { load: async () => (await import('../aws/events/ApiDestination')).apiDestination },archive : { load: async () => (await import('../aws/events/Archive')).archive },connection : { load: async () => (await import('../aws/events/Connection')).connection },endpoint : { load: async () => (await import('../aws/events/Endpoint')).endpoint },eventBus : { load: async () => (await import('../aws/events/EventBus')).eventBus },eventBusPolicy : { load: async () => (await import('../aws/events/EventBusPolicy')).eventBusPolicy },rule : { load: async () => (await import('../aws/events/Rule')).rule }},
evidently : {
experiment : { load: async () => (await import('../aws/evidently/Experiment')).experiment },feature : { load: async () => (await import('../aws/evidently/Feature')).feature },launch : { load: async () => (await import('../aws/evidently/Launch')).launch },project : { load: async () => (await import('../aws/evidently/Project')).project },segment : { load: async () => (await import('../aws/evidently/Segment')).segment }},
fis : {
experimentTemplate : { load: async () => (await import('../aws/fis/ExperimentTemplate')).experimentTemplate }},
fms : {
notificationChannel : { load: async () => (await import('../aws/fms/NotificationChannel')).notificationChannel },policy : { load: async () => (await import('../aws/fms/Policy')).policy },resourceSet : { load: async () => (await import('../aws/fms/ResourceSet')).resourceSet }},
fsx : {
dataRepositoryAssociation : { load: async () => (await import('../aws/fsx/DataRepositoryAssociation')).dataRepositoryAssociation },fileSystem : { load: async () => (await import('../aws/fsx/FileSystem')).fileSystem },snapshot : { load: async () => (await import('../aws/fsx/Snapshot')).snapshot },storageVirtualMachine : { load: async () => (await import('../aws/fsx/StorageVirtualMachine')).storageVirtualMachine },volume : { load: async () => (await import('../aws/fsx/Volume')).volume }},
finspace : {
environment : { load: async () => (await import('../aws/finspace/Environment')).environment }},
forecast : {
dataset : { load: async () => (await import('../aws/forecast/Dataset')).dataset },datasetGroup : { load: async () => (await import('../aws/forecast/DatasetGroup')).datasetGroup }},
frauddetector : {
detector : { load: async () => (await import('../aws/frauddetector/Detector')).detector },entityType : { load: async () => (await import('../aws/frauddetector/EntityType')).entityType },eventType : { load: async () => (await import('../aws/frauddetector/EventType')).eventType },label : { load: async () => (await import('../aws/frauddetector/Label')).label },list : { load: async () => (await import('../aws/frauddetector/List')).list },outcome : { load: async () => (await import('../aws/frauddetector/Outcome')).outcome },variable : { load: async () => (await import('../aws/frauddetector/Variable')).variable }},
gamelift : {
alias : { load: async () => (await import('../aws/gamelift/Alias')).alias },build : { load: async () => (await import('../aws/gamelift/Build')).build },fleet : { load: async () => (await import('../aws/gamelift/Fleet')).fleet },gameServerGroup : { load: async () => (await import('../aws/gamelift/GameServerGroup')).gameServerGroup },gameSessionQueue : { load: async () => (await import('../aws/gamelift/GameSessionQueue')).gameSessionQueue },location : { load: async () => (await import('../aws/gamelift/Location')).location },matchmakingConfiguration : { load: async () => (await import('../aws/gamelift/MatchmakingConfiguration')).matchmakingConfiguration },matchmakingRuleSet : { load: async () => (await import('../aws/gamelift/MatchmakingRuleSet')).matchmakingRuleSet },script : { load: async () => (await import('../aws/gamelift/Script')).script }},
globalaccelerator : {
accelerator : { load: async () => (await import('../aws/globalaccelerator/Accelerator')).accelerator },endpointGroup : { load: async () => (await import('../aws/globalaccelerator/EndpointGroup')).endpointGroup },listener : { load: async () => (await import('../aws/globalaccelerator/Listener')).listener }},
glue : {
classifier : { load: async () => (await import('../aws/glue/Classifier')).classifier },connection : { load: async () => (await import('../aws/glue/Connection')).connection },crawler : { load: async () => (await import('../aws/glue/Crawler')).crawler },dataCatalogEncryptionSettings : { load: async () => (await import('../aws/glue/DataCatalogEncryptionSettings')).dataCatalogEncryptionSettings },dataQualityRuleset : { load: async () => (await import('../aws/glue/DataQualityRuleset')).dataQualityRuleset },database : { load: async () => (await import('../aws/glue/Database')).database },devEndpoint : { load: async () => (await import('../aws/glue/DevEndpoint')).devEndpoint },job : { load: async () => (await import('../aws/glue/Job')).job },mLTransform : { load: async () => (await import('../aws/glue/MLTransform')).mLTransform },partition : { load: async () => (await import('../aws/glue/Partition')).partition },registry : { load: async () => (await import('../aws/glue/Registry')).registry },schema : { load: async () => (await import('../aws/glue/Schema')).schema },schemaVersion : { load: async () => (await import('../aws/glue/SchemaVersion')).schemaVersion },schemaVersionMetadata : { load: async () => (await import('../aws/glue/SchemaVersionMetadata')).schemaVersionMetadata },securityConfiguration : { load: async () => (await import('../aws/glue/SecurityConfiguration')).securityConfiguration },table : { load: async () => (await import('../aws/glue/Table')).table },trigger : { load: async () => (await import('../aws/glue/Trigger')).trigger },workflow : { load: async () => (await import('../aws/glue/Workflow')).workflow }},
grafana : {
workspace : { load: async () => (await import('../aws/grafana/Workspace')).workspace }},
greengrass : {
connectorDefinition : { load: async () => (await import('../aws/greengrass/ConnectorDefinition')).connectorDefinition },connectorDefinitionVersion : { load: async () => (await import('../aws/greengrass/ConnectorDefinitionVersion')).connectorDefinitionVersion },coreDefinition : { load: async () => (await import('../aws/greengrass/CoreDefinition')).coreDefinition },coreDefinitionVersion : { load: async () => (await import('../aws/greengrass/CoreDefinitionVersion')).coreDefinitionVersion },deviceDefinition : { load: async () => (await import('../aws/greengrass/DeviceDefinition')).deviceDefinition },deviceDefinitionVersion : { load: async () => (await import('../aws/greengrass/DeviceDefinitionVersion')).deviceDefinitionVersion },functionDefinition : { load: async () => (await import('../aws/greengrass/FunctionDefinition')).functionDefinition },functionDefinitionVersion : { load: async () => (await import('../aws/greengrass/FunctionDefinitionVersion')).functionDefinitionVersion },group : { load: async () => (await import('../aws/greengrass/Group')).group },groupVersion : { load: async () => (await import('../aws/greengrass/GroupVersion')).groupVersion },loggerDefinition : { load: async () => (await import('../aws/greengrass/LoggerDefinition')).loggerDefinition },loggerDefinitionVersion : { load: async () => (await import('../aws/greengrass/LoggerDefinitionVersion')).loggerDefinitionVersion },resourceDefinition : { load: async () => (await import('../aws/greengrass/ResourceDefinition')).resourceDefinition },resourceDefinitionVersion : { load: async () => (await import('../aws/greengrass/ResourceDefinitionVersion')).resourceDefinitionVersion },subscriptionDefinition : { load: async () => (await import('../aws/greengrass/SubscriptionDefinition')).subscriptionDefinition },subscriptionDefinitionVersion : { load: async () => (await import('../aws/greengrass/SubscriptionDefinitionVersion')).subscriptionDefinitionVersion }},
greengrassv2 : {
componentVersion : { load: async () => (await import('../aws/greengrassv2/ComponentVersion')).componentVersion },deployment : { load: async () => (await import('../aws/greengrassv2/Deployment')).deployment }},
groundstation : {
config : { load: async () => (await import('../aws/groundstation/Config')).config },dataflowEndpointGroup : { load: async () => (await import('../aws/groundstation/DataflowEndpointGroup')).dataflowEndpointGroup },missionProfile : { load: async () => (await import('../aws/groundstation/MissionProfile')).missionProfile }},
guardduty : {
detector : { load: async () => (await import('../aws/guardduty/Detector')).detector },filter : { load: async () => (await import('../aws/guardduty/Filter')).filter },iPSet : { load: async () => (await import('../aws/guardduty/IPSet')).iPSet },master : { load: async () => (await import('../aws/guardduty/Master')).master },member : { load: async () => (await import('../aws/guardduty/Member')).member },threatIntelSet : { load: async () => (await import('../aws/guardduty/ThreatIntelSet')).threatIntelSet }},
healthlake : {
fHIRDatastore : { load: async () => (await import('../aws/healthlake/FHIRDatastore')).fHIRDatastore }},
iam : {
accessKey : { load: async () => (await import('../aws/iam/AccessKey')).accessKey },group : { load: async () => (await import('../aws/iam/Group')).group },groupPolicy : { load: async () => (await import('../aws/iam/GroupPolicy')).groupPolicy },instanceProfile : { load: async () => (await import('../aws/iam/InstanceProfile')).instanceProfile },managedPolicy : { load: async () => (await import('../aws/iam/ManagedPolicy')).managedPolicy },oIDCProvider : { load: async () => (await import('../aws/iam/OIDCProvider')).oIDCProvider },policy : { load: async () => (await import('../aws/iam/Policy')).policy },role : { load: async () => (await import('../aws/iam/Role')).role },rolePolicy : { load: async () => (await import('../aws/iam/RolePolicy')).rolePolicy },sAMLProvider : { load: async () => (await import('../aws/iam/SAMLProvider')).sAMLProvider },serverCertificate : { load: async () => (await import('../aws/iam/ServerCertificate')).serverCertificate },serviceLinkedRole : { load: async () => (await import('../aws/iam/ServiceLinkedRole')).serviceLinkedRole },user : { load: async () => (await import('../aws/iam/User')).user },userPolicy : { load: async () => (await import('../aws/iam/UserPolicy')).userPolicy },userToGroupAddition : { load: async () => (await import('../aws/iam/UserToGroupAddition')).userToGroupAddition },virtualMFADevice : { load: async () => (await import('../aws/iam/VirtualMFADevice')).virtualMFADevice }},
identitystore : {
group : { load: async () => (await import('../aws/identitystore/Group')).group },groupMembership : { load: async () => (await import('../aws/identitystore/GroupMembership')).groupMembership }},
imagebuilder : {
component : { load: async () => (await import('../aws/imagebuilder/Component')).component },containerRecipe : { load: async () => (await import('../aws/imagebuilder/ContainerRecipe')).containerRecipe },distributionConfiguration : { load: async () => (await import('../aws/imagebuilder/DistributionConfiguration')).distributionConfiguration },image : { load: async () => (await import('../aws/imagebuilder/Image')).image },imagePipeline : { load: async () => (await import('../aws/imagebuilder/ImagePipeline')).imagePipeline },imageRecipe : { load: async () => (await import('../aws/imagebuilder/ImageRecipe')).imageRecipe },infrastructureConfiguration : { load: async () => (await import('../aws/imagebuilder/InfrastructureConfiguration')).infrastructureConfiguration }},
inspector : {
assessmentTarget : { load: async () => (await import('../aws/inspector/AssessmentTarget')).assessmentTarget },assessmentTemplate : { load: async () => (await import('../aws/inspector/AssessmentTemplate')).assessmentTemplate },resourceGroup : { load: async () => (await import('../aws/inspector/ResourceGroup')).resourceGroup }},
inspectorv2 : {
filter : { load: async () => (await import('../aws/inspectorv2/Filter')).filter }},
internetmonitor : {
monitor : { load: async () => (await import('../aws/internetmonitor/Monitor')).monitor }},
iot1click : {
device : { load: async () => (await import('../aws/iot1click/Device')).device },placement : { load: async () => (await import('../aws/iot1click/Placement')).placement },project : { load: async () => (await import('../aws/iot1click/Project')).project }},
iot : {
accountAuditConfiguration : { load: async () => (await import('../aws/iot/AccountAuditConfiguration')).accountAuditConfiguration },authorizer : { load: async () => (await import('../aws/iot/Authorizer')).authorizer },billingGroup : { load: async () => (await import('../aws/iot/BillingGroup')).billingGroup },cACertificate : { load: async () => (await import('../aws/iot/CACertificate')).cACertificate },certificate : { load: async () => (await import('../aws/iot/Certificate')).certificate },customMetric : { load: async () => (await import('../aws/iot/CustomMetric')).customMetric },dimension : { load: async () => (await import('../aws/iot/Dimension')).dimension },domainConfiguration : { load: async () => (await import('../aws/iot/DomainConfiguration')).domainConfiguration },fleetMetric : { load: async () => (await import('../aws/iot/FleetMetric')).fleetMetric },jobTemplate : { load: async () => (await import('../aws/iot/JobTemplate')).jobTemplate },logging : { load: async () => (await import('../aws/iot/Logging')).logging },mitigationAction : { load: async () => (await import('../aws/iot/MitigationAction')).mitigationAction },policy : { load: async () => (await import('../aws/iot/Policy')).policy },policyPrincipalAttachment : { load: async () => (await import('../aws/iot/PolicyPrincipalAttachment')).policyPrincipalAttachment },provisioningTemplate : { load: async () => (await import('../aws/iot/ProvisioningTemplate')).provisioningTemplate },resourceSpecificLogging : { load: async () => (await import('../aws/iot/ResourceSpecificLogging')).resourceSpecificLogging },roleAlias : { load: async () => (await import('../aws/iot/RoleAlias')).roleAlias },scheduledAudit : { load: async () => (await import('../aws/iot/ScheduledAudit')).scheduledAudit },securityProfile : { load: async () => (await import('../aws/iot/SecurityProfile')).securityProfile },softwarePackage : { load: async () => (await import('../aws/iot/SoftwarePackage')).softwarePackage },softwarePackageVersion : { load: async () => (await import('../aws/iot/SoftwarePackageVersion')).softwarePackageVersion },thing : { load: async () => (await import('../aws/iot/Thing')).thing },thingGroup : { load: async () => (await import('../aws/iot/ThingGroup')).thingGroup },thingPrincipalAttachment : { load: async () => (await import('../aws/iot/ThingPrincipalAttachment')).thingPrincipalAttachment },thingType : { load: async () => (await import('../aws/iot/ThingType')).thingType },topicRule : { load: async () => (await import('../aws/iot/TopicRule')).topicRule },topicRuleDestination : { load: async () => (await import('../aws/iot/TopicRuleDestination')).topicRuleDestination }},
iotanalytics : {
channel : { load: async () => (await import('../aws/iotanalytics/Channel')).channel },dataset : { load: async () => (await import('../aws/iotanalytics/Dataset')).dataset },datastore : { load: async () => (await import('../aws/iotanalytics/Datastore')).datastore },pipeline : { load: async () => (await import('../aws/iotanalytics/Pipeline')).pipeline }},
iotevents : {
alarmModel : { load: async () => (await import('../aws/iotevents/AlarmModel')).alarmModel },detectorModel : { load: async () => (await import('../aws/iotevents/DetectorModel')).detectorModel },input : { load: async () => (await import('../aws/iotevents/Input')).input }},
iotfleethub : {
application : { load: async () => (await import('../aws/iotfleethub/Application')).application }},
iotsitewise : {
accessPolicy : { load: async () => (await import('../aws/iotsitewise/AccessPolicy')).accessPolicy },asset : { load: async () => (await import('../aws/iotsitewise/Asset')).asset },assetModel : { load: async () => (await import('../aws/iotsitewise/AssetModel')).assetModel },dashboard : { load: async () => (await import('../aws/iotsitewise/Dashboard')).dashboard },gateway : { load: async () => (await import('../aws/iotsitewise/Gateway')).gateway },portal : { load: async () => (await import('../aws/iotsitewise/Portal')).portal },project : { load: async () => (await import('../aws/iotsitewise/Project')).project }},
kms : {
alias : { load: async () => (await import('../aws/kms/Alias')).alias },key : { load: async () => (await import('../aws/kms/Key')).key },replicaKey : { load: async () => (await import('../aws/kms/ReplicaKey')).replicaKey }},
kafkaconnect : {
connector : { load: async () => (await import('../aws/kafkaconnect/Connector')).connector }},
kendra : {
dataSource : { load: async () => (await import('../aws/kendra/DataSource')).dataSource },faq : { load: async () => (await import('../aws/kendra/Faq')).faq },index : { load: async () => (await import('../aws/kendra/Index')).index }},
kendraranking : {
executionPlan : { load: async () => (await import('../aws/kendraranking/ExecutionPlan')).executionPlan }},
kinesis : {
stream : { load: async () => (await import('../aws/kinesis/Stream')).stream },streamConsumer : { load: async () => (await import('../aws/kinesis/StreamConsumer')).streamConsumer }},
kinesisanalytics : {
application : { load: async () => (await import('../aws/kinesisanalytics/Application')).application },applicationOutput : { load: async () => (await import('../aws/kinesisanalytics/ApplicationOutput')).applicationOutput },applicationReferenceDataSource : { load: async () => (await import('../aws/kinesisanalytics/ApplicationReferenceDataSource')).applicationReferenceDataSource }},
kinesisanalyticsv2 : {
application : { load: async () => (await import('../aws/kinesisanalyticsv2/Application')).application },applicationCloudWatchLoggingOption : { load: async () => (await import('../aws/kinesisanalyticsv2/ApplicationCloudWatchLoggingOption')).applicationCloudWatchLoggingOption },applicationOutput : { load: async () => (await import('../aws/kinesisanalyticsv2/ApplicationOutput')).applicationOutput },applicationReferenceDataSource : { load: async () => (await import('../aws/kinesisanalyticsv2/ApplicationReferenceDataSource')).applicationReferenceDataSource }},
kinesisfirehose : {
deliveryStream : { load: async () => (await import('../aws/kinesisfirehose/DeliveryStream')).deliveryStream }},
kinesisvideo : {
signalingChannel : { load: async () => (await import('../aws/kinesisvideo/SignalingChannel')).signalingChannel },stream : { load: async () => (await import('../aws/kinesisvideo/Stream')).stream }},
lakeformation : {
dataCellsFilter : { load: async () => (await import('../aws/lakeformation/DataCellsFilter')).dataCellsFilter },dataLakeSettings : { load: async () => (await import('../aws/lakeformation/DataLakeSettings')).dataLakeSettings },permissions : { load: async () => (await import('../aws/lakeformation/Permissions')).permissions },principalPermissions : { load: async () => (await import('../aws/lakeformation/PrincipalPermissions')).principalPermissions },resource : { load: async () => (await import('../aws/lakeformation/Resource')).resource },tag : { load: async () => (await import('../aws/lakeformation/Tag')).tag },tagAssociation : { load: async () => (await import('../aws/lakeformation/TagAssociation')).tagAssociation }},
lambda : {
alias : { load: async () => (await import('../aws/lambda/Alias')).alias },codeSigningConfig : { load: async () => (await import('../aws/lambda/CodeSigningConfig')).codeSigningConfig },eventInvokeConfig : { load: async () => (await import('../aws/lambda/EventInvokeConfig')).eventInvokeConfig },eventSourceMapping : { load: async () => (await import('../aws/lambda/EventSourceMapping')).eventSourceMapping },createFunction : { load: async () => (await import('../aws/lambda/FunctionProp')).createFunction },layerVersion : { load: async () => (await import('../aws/lambda/LayerVersion')).layerVersion },layerVersionPermission : { load: async () => (await import('../aws/lambda/LayerVersionPermission')).layerVersionPermission },permission : { load: async () => (await import('../aws/lambda/Permission')).permission },url : { load: async () => (await import('../aws/lambda/Url')).url },version : { load: async () => (await import('../aws/lambda/Version')).version }},
licensemanager : {
grant : { load: async () => (await import('../aws/licensemanager/Grant')).grant },license : { load: async () => (await import('../aws/licensemanager/License')).license }},
lightsail : {
alarm : { load: async () => (await import('../aws/lightsail/Alarm')).alarm },bucket : { load: async () => (await import('../aws/lightsail/Bucket')).bucket },certificate : { load: async () => (await import('../aws/lightsail/Certificate')).certificate },container : { load: async () => (await import('../aws/lightsail/Container')).container },database : { load: async () => (await import('../aws/lightsail/Database')).database },disk : { load: async () => (await import('../aws/lightsail/Disk')).disk },instance : { load: async () => (await import('../aws/lightsail/Instance')).instance },loadBalancer : { load: async () => (await import('../aws/lightsail/LoadBalancer')).loadBalancer },loadBalancerTlsCertificate : { load: async () => (await import('../aws/lightsail/LoadBalancerTlsCertificate')).loadBalancerTlsCertificate },staticIp : { load: async () => (await import('../aws/lightsail/StaticIp')).staticIp }},
location : {
geofenceCollection : { load: async () => (await import('../aws/location/GeofenceCollection')).geofenceCollection },map : { load: async () => (await import('../aws/location/Map')).map },placeIndex : { load: async () => (await import('../aws/location/PlaceIndex')).placeIndex },routeCalculator : { load: async () => (await import('../aws/location/RouteCalculator')).routeCalculator },tracker : { load: async () => (await import('../aws/location/Tracker')).tracker },trackerConsumer : { load: async () => (await import('../aws/location/TrackerConsumer')).trackerConsumer }},
logs : {
accountPolicy : { load: async () => (await import('../aws/logs/AccountPolicy')).accountPolicy },destination : { load: async () => (await import('../aws/logs/Destination')).destination },logGroup : { load: async () => (await import('../aws/logs/LogGroup')).logGroup },logStream : { load: async () => (await import('../aws/logs/LogStream')).logStream },metricFilter : { load: async () => (await import('../aws/logs/MetricFilter')).metricFilter },queryDefinition : { load: async () => (await import('../aws/logs/QueryDefinition')).queryDefinition },resourcePolicy : { load: async () => (await import('../aws/logs/ResourcePolicy')).resourcePolicy },subscriptionFilter : { load: async () => (await import('../aws/logs/SubscriptionFilter')).subscriptionFilter }},
lookoutmetrics : {
alert : { load: async () => (await import('../aws/lookoutmetrics/Alert')).alert },anomalyDetector : { load: async () => (await import('../aws/lookoutmetrics/AnomalyDetector')).anomalyDetector }},
lookoutvision : {
project : { load: async () => (await import('../aws/lookoutvision/Project')).project }},
m2 : {
application : { load: async () => (await import('../aws/m2/Application')).application },environment : { load: async () => (await import('../aws/m2/Environment')).environment }},
msk : {
batchScramSecret : { load: async () => (await import('../aws/msk/BatchScramSecret')).batchScramSecret },cluster : { load: async () => (await import('../aws/msk/Cluster')).cluster },clusterPolicy : { load: async () => (await import('../aws/msk/ClusterPolicy')).clusterPolicy },configuration : { load: async () => (await import('../aws/msk/Configuration')).configuration },replicator : { load: async () => (await import('../aws/msk/Replicator')).replicator },serverlessCluster : { load: async () => (await import('../aws/msk/ServerlessCluster')).serverlessCluster },vpcConnection : { load: async () => (await import('../aws/msk/VpcConnection')).vpcConnection }},
mwaa : {
environment : { load: async () => (await import('../aws/mwaa/Environment')).environment }},
macie : {
allowList : { load: async () => (await import('../aws/macie/AllowList')).allowList },customDataIdentifier : { load: async () => (await import('../aws/macie/CustomDataIdentifier')).customDataIdentifier },findingsFilter : { load: async () => (await import('../aws/macie/FindingsFilter')).findingsFilter },session : { load: async () => (await import('../aws/macie/Session')).session }},
managedblockchain : {
member : { load: async () => (await import('../aws/managedblockchain/Member')).member },node : { load: async () => (await import('../aws/managedblockchain/Node')).node }},
mediaconnect : {
bridge : { load: async () => (await import('../aws/mediaconnect/Bridge')).bridge },bridgeOutput : { load: async () => (await import('../aws/mediaconnect/BridgeOutput')).bridgeOutput },bridgeSource : { load: async () => (await import('../aws/mediaconnect/BridgeSource')).bridgeSource },flow : { load: async () => (await import('../aws/mediaconnect/Flow')).flow },flowEntitlement : { load: async () => (await import('../aws/mediaconnect/FlowEntitlement')).flowEntitlement },flowOutput : { load: async () => (await import('../aws/mediaconnect/FlowOutput')).flowOutput },flowSource : { load: async () => (await import('../aws/mediaconnect/FlowSource')).flowSource },flowVpcInterface : { load: async () => (await import('../aws/mediaconnect/FlowVpcInterface')).flowVpcInterface },gateway : { load: async () => (await import('../aws/mediaconnect/Gateway')).gateway }},
mediaconvert : {
jobTemplate : { load: async () => (await import('../aws/mediaconvert/JobTemplate')).jobTemplate },preset : { load: async () => (await import('../aws/mediaconvert/Preset')).preset },queue : { load: async () => (await import('../aws/mediaconvert/Queue')).queue }},
medialive : {
channel : { load: async () => (await import('../aws/medialive/Channel')).channel },inputSecurityGroup : { load: async () => (await import('../aws/medialive/InputSecurityGroup')).inputSecurityGroup }},
mediapackage : {
asset : { load: async () => (await import('../aws/mediapackage/Asset')).asset },channel : { load: async () => (await import('../aws/mediapackage/Channel')).channel },originEndpoint : { load: async () => (await import('../aws/mediapackage/OriginEndpoint')).originEndpoint },packagingConfiguration : { load: async () => (await import('../aws/mediapackage/PackagingConfiguration')).packagingConfiguration },packagingGroup : { load: async () => (await import('../aws/mediapackage/PackagingGroup')).packagingGroup }},
mediapackagev2 : {
channel : { load: async () => (await import('../aws/mediapackagev2/Channel')).channel },channelGroup : { load: async () => (await import('../aws/mediapackagev2/ChannelGroup')).channelGroup },channelPolicy : { load: async () => (await import('../aws/mediapackagev2/ChannelPolicy')).channelPolicy },originEndpoint : { load: async () => (await import('../aws/mediapackagev2/OriginEndpoint')).originEndpoint },originEndpointPolicy : { load: async () => (await import('../aws/mediapackagev2/OriginEndpointPolicy')).originEndpointPolicy }},
mediatailor : {
channel : { load: async () => (await import('../aws/mediatailor/Channel')).channel },channelPolicy : { load: async () => (await import('../aws/mediatailor/ChannelPolicy')).channelPolicy },liveSource : { load: async () => (await import('../aws/mediatailor/LiveSource')).liveSource },playbackConfiguration : { load: async () => (await import('../aws/mediatailor/PlaybackConfiguration')).playbackConfiguration },sourceLocation : { load: async () => (await import('../aws/mediatailor/SourceLocation')).sourceLocation },vodSource : { load: async () => (await import('../aws/mediatailor/VodSource')).vodSource }},
memorydb : {
aCL : { load: async () => (await import('../aws/memorydb/ACL')).aCL },cluster : { load: async () => (await import('../aws/memorydb/Cluster')).cluster },parameterGroup : { load: async () => (await import('../aws/memorydb/ParameterGroup')).parameterGroup },subnetGroup : { load: async () => (await import('../aws/memorydb/SubnetGroup')).subnetGroup },user : { load: async () => (await import('../aws/memorydb/User')).user }},
neptune : {
dBCluster : { load: async () => (await import('../aws/neptune/DBCluster')).dBCluster },dBClusterParameterGroup : { load: async () => (await import('../aws/neptune/DBClusterParameterGroup')).dBClusterParameterGroup },dBInstance : { load: async () => (await import('../aws/neptune/DBInstance')).dBInstance },dBParameterGroup : { load: async () => (await import('../aws/neptune/DBParameterGroup')).dBParameterGroup },dBSubnetGroup : { load: async () => (await import('../aws/neptune/DBSubnetGroup')).dBSubnetGroup }},
networkfirewall : {
firewall : { load: async () => (await import('../aws/networkfirewall/Firewall')).firewall },firewallPolicy : { load: async () => (await import('../aws/networkfirewall/FirewallPolicy')).firewallPolicy },loggingConfiguration : { load: async () => (await import('../aws/networkfirewall/LoggingConfiguration')).loggingConfiguration },ruleGroup : { load: async () => (await import('../aws/networkfirewall/RuleGroup')).ruleGroup }},
networkmanager : {
connectAttachment : { load: async () => (await import('../aws/networkmanager/ConnectAttachment')).connectAttachment },connectPeer : { load: async () => (await import('../aws/networkmanager/ConnectPeer')).connectPeer },coreNetwork : { load: async () => (await import('../aws/networkmanager/CoreNetwork')).coreNetwork },customerGatewayAssociation : { load: async () => (await import('../aws/networkmanager/CustomerGatewayAssociation')).customerGatewayAssociation },device : { load: async () => (await import('../aws/networkmanager/Device')).device },globalNetwork : { load: async () => (await import('../aws/networkmanager/GlobalNetwork')).globalNetwork },link : { load: async () => (await import('../aws/networkmanager/Link')).link },linkAssociation : { load: async () => (await import('../aws/networkmanager/LinkAssociation')).linkAssociation },site : { load: async () => (await import('../aws/networkmanager/Site')).site },siteToSiteVpnAttachment : { load: async () => (await import('../aws/networkmanager/SiteToSiteVpnAttachment')).siteToSiteVpnAttachment },transitGatewayPeering : { load: async () => (await import('../aws/networkmanager/TransitGatewayPeering')).transitGatewayPeering },transitGatewayRegistration : { load: async () => (await import('../aws/networkmanager/TransitGatewayRegistration')).transitGatewayRegistration },transitGatewayRouteTableAttachment : { load: async () => (await import('../aws/networkmanager/TransitGatewayRouteTableAttachment')).transitGatewayRouteTableAttachment },vpcAttachment : { load: async () => (await import('../aws/networkmanager/VpcAttachment')).vpcAttachment }},
nimblestudio : {
studio : { load: async () => (await import('../aws/nimblestudio/Studio')).studio }},
osis : {
pipeline : { load: async () => (await import('../aws/osis/Pipeline')).pipeline }},
oam : {
link : { load: async () => (await import('../aws/oam/Link')).link },sink : { load: async () => (await import('../aws/oam/Sink')).sink }},
opensearchserverless : {
accessPolicy : { load: async () => (await import('../aws/opensearchserverless/AccessPolicy')).accessPolicy },collection : { load: async () => (await import('../aws/opensearchserverless/Collection')).collection },securityConfig : { load: async () => (await import('../aws/opensearchserverless/SecurityConfig')).securityConfig },securityPolicy : { load: async () => (await import('../aws/opensearchserverless/SecurityPolicy')).securityPolicy },vpcEndpoint : { load: async () => (await import('../aws/opensearchserverless/VpcEndpoint')).vpcEndpoint }},
opensearchservice : {
domain : { load: async () => (await import('../aws/opensearchservice/Domain')).domain }},
opsworks : {
app : { load: async () => (await import('../aws/opsworks/App')).app },elasticLoadBalancerAttachment : { load: async () => (await import('../aws/opsworks/ElasticLoadBalancerAttachment')).elasticLoadBalancerAttachment },instance : { load: async () => (await import('../aws/opsworks/Instance')).instance },layer : { load: async () => (await import('../aws/opsworks/Layer')).layer },stack : { load: async () => (await import('../aws/opsworks/Stack')).stack },userProfile : { load: async () => (await import('../aws/opsworks/UserProfile')).userProfile },volume : { load: async () => (await import('../aws/opsworks/Volume')).volume }},
opsworkscm : {
server : { load: async () => (await import('../aws/opsworkscm/Server')).server }},
organizations : {
account : { load: async () => (await import('../aws/organizations/Account')).account },organization : { load: async () => (await import('../aws/organizations/Organization')).organization },organizationalUnit : { load: async () => (await import('../aws/organizations/OrganizationalUnit')).organizationalUnit },policy : { load: async () => (await import('../aws/organizations/Policy')).policy },resourcePolicy : { load: async () => (await import('../aws/organizations/ResourcePolicy')).resourcePolicy }},
pcaconnectorad : {
connector : { load: async () => (await import('../aws/pcaconnectorad/Connector')).connector },directoryRegistration : { load: async () => (await import('../aws/pcaconnectorad/DirectoryRegistration')).directoryRegistration },servicePrincipalName : { load: async () => (await import('../aws/pcaconnectorad/ServicePrincipalName')).servicePrincipalName },template : { load: async () => (await import('../aws/pcaconnectorad/Template')).template },templateGroupAccessControlEntry : { load: async () => (await import('../aws/pcaconnectorad/TemplateGroupAccessControlEntry')).templateGroupAccessControlEntry }},
personalize : {
dataset : { load: async () => (await import('../aws/personalize/Dataset')).dataset },datasetGroup : { load: async () => (await import('../aws/personalize/DatasetGroup')).datasetGroup },schema : { load: async () => (await import('../aws/personalize/Schema')).schema },solution : { load: async () => (await import('../aws/personalize/Solution')).solution }},
pinpoint : {
inAppTemplate : { load: async () => (await import('../aws/pinpoint/InAppTemplate')).inAppTemplate }},
pipes : {
pipe : { load: async () => (await import('../aws/pipes/Pipe')).pipe }},
proton : {
environmentAccountConnection : { load: async () => (await import('../aws/proton/EnvironmentAccountConnection')).environmentAccountConnection },environmentTemplate : { load: async () => (await import('../aws/proton/EnvironmentTemplate')).environmentTemplate },serviceTemplate : { load: async () => (await import('../aws/proton/ServiceTemplate')).serviceTemplate }},
qldb : {
ledger : { load: async () => (await import('../aws/qldb/Ledger')).ledger },stream : { load: async () => (await import('../aws/qldb/Stream')).stream }},
quicksight : {
analysis : { load: async () => (await import('../aws/quicksight/Analysis')).analysis },dashboard : { load: async () => (await import('../aws/quicksight/Dashboard')).dashboard },dataSet : { load: async () => (await import('../aws/quicksight/DataSet')).dataSet },dataSource : { load: async () => (await import('../aws/quicksight/DataSource')).dataSource },refreshSchedule : { load: async () => (await import('../aws/quicksight/RefreshSchedule')).refreshSchedule },template : { load: async () => (await import('../aws/quicksight/Template')).template },theme : { load: async () => (await import('../aws/quicksight/Theme')).theme },topic : { load: async () => (await import('../aws/quicksight/Topic')).topic },vPCConnection : { load: async () => (await import('../aws/quicksight/VPCConnection')).vPCConnection }},
ram : {
permission : { load: async () => (await import('../aws/ram/Permission')).permission },resourceShare : { load: async () => (await import('../aws/ram/ResourceShare')).resourceShare }},
rds : {
customDBEngineVersion : { load: async () => (await import('../aws/rds/CustomDBEngineVersion')).customDBEngineVersion },dBCluster : { load: async () => (await import('../aws/rds/DBCluster')).dBCluster },dBClusterParameterGroup : { load: async () => (await import('../aws/rds/DBClusterParameterGroup')).dBClusterParameterGroup },dBInstance : { load: async () => (await import('../aws/rds/DBInstance')).dBInstance },dBParameterGroup : { load: async () => (await import('../aws/rds/DBParameterGroup')).dBParameterGroup },dBProxy : { load: async () => (await import('../aws/rds/DBProxy')).dBProxy },dBProxyEndpoint : { load: async () => (await import('../aws/rds/DBProxyEndpoint')).dBProxyEndpoint },dBProxyTargetGroup : { load: async () => (await import('../aws/rds/DBProxyTargetGroup')).dBProxyTargetGroup },dBSecurityGroup : { load: async () => (await import('../aws/rds/DBSecurityGroup')).dBSecurityGroup },dBSecurityGroupIngress : { load: async () => (await import('../aws/rds/DBSecurityGroupIngress')).dBSecurityGroupIngress },dBSubnetGroup : { load: async () => (await import('../aws/rds/DBSubnetGroup')).dBSubnetGroup },eventSubscription : { load: async () => (await import('../aws/rds/EventSubscription')).eventSubscription },globalCluster : { load: async () => (await import('../aws/rds/GlobalCluster')).globalCluster },optionGroup : { load: async () => (await import('../aws/rds/OptionGroup')).optionGroup }},
rum : {
appMonitor : { load: async () => (await import('../aws/rum/AppMonitor')).appMonitor }},
redshift : {
cluster : { load: async () => (await import('../aws/redshift/Cluster')).cluster },clusterParameterGroup : { load: async () => (await import('../aws/redshift/ClusterParameterGroup')).clusterParameterGroup },clusterSecurityGroup : { load: async () => (await import('../aws/redshift/ClusterSecurityGroup')).clusterSecurityGroup },clusterSecurityGroupIngress : { load: async () => (await import('../aws/redshift/ClusterSecurityGroupIngress')).clusterSecurityGroupIngress },clusterSubnetGroup : { load: async () => (await import('../aws/redshift/ClusterSubnetGroup')).clusterSubnetGroup },endpointAccess : { load: async () => (await import('../aws/redshift/EndpointAccess')).endpointAccess },endpointAuthorization : { load: async () => (await import('../aws/redshift/EndpointAuthorization')).endpointAuthorization },eventSubscription : { load: async () => (await import('../aws/redshift/EventSubscription')).eventSubscription },scheduledAction : { load: async () => (await import('../aws/redshift/ScheduledAction')).scheduledAction }},
redshiftserverless : {
namespace : { load: async () => (await import('../aws/redshiftserverless/Namespace')).namespace },workgroup : { load: async () => (await import('../aws/redshiftserverless/Workgroup')).workgroup }},
refactorspaces : {
application : { load: async () => (await import('../aws/refactorspaces/Application')).application },environment : { load: async () => (await import('../aws/refactorspaces/Environment')).environment },route : { load: async () => (await import('../aws/refactorspaces/Route')).route },service : { load: async () => (await import('../aws/refactorspaces/Service')).service }},
rekognition : {
collection : { load: async () => (await import('../aws/rekognition/Collection')).collection },project : { load: async () => (await import('../aws/rekognition/Project')).project },streamProcessor : { load: async () => (await import('../aws/rekognition/StreamProcessor')).streamProcessor }},
resiliencehub : {
app : { load: async () => (await import('../aws/resiliencehub/App')).app },resiliencyPolicy : { load: async () => (await import('../aws/resiliencehub/ResiliencyPolicy')).resiliencyPolicy }},
resourceexplorer2 : {
defaultViewAssociation : { load: async () => (await import('../aws/resourceexplorer2/DefaultViewAssociation')).defaultViewAssociation },index : { load: async () => (await import('../aws/resourceexplorer2/Index')).index },view : { load: async () => (await import('../aws/resourceexplorer2/View')).view }},
resourcegroups : {
group : { load: async () => (await import('../aws/resourcegroups/Group')).group }},
robomaker : {
fleet : { load: async () => (await import('../aws/robomaker/Fleet')).fleet },robot : { load: async () => (await import('../aws/robomaker/Robot')).robot },robotApplication : { load: async () => (await import('../aws/robomaker/RobotApplication')).robotApplication },robotApplicationVersion : { load: async () => (await import('../aws/robomaker/RobotApplicationVersion')).robotApplicationVersion },simulationApplication : { load: async () => (await import('../aws/robomaker/SimulationApplication')).simulationApplication },simulationApplicationVersion : { load: async () => (await import('../aws/robomaker/SimulationApplicationVersion')).simulationApplicationVersion }},
rolesanywhere : {
cRL : { load: async () => (await import('../aws/rolesanywhere/CRL')).cRL },profile : { load: async () => (await import('../aws/rolesanywhere/Profile')).profile },trustAnchor : { load: async () => (await import('../aws/rolesanywhere/TrustAnchor')).trustAnchor }},
route53 : {
cidrCollection : { load: async () => (await import('../aws/route53/CidrCollection')).cidrCollection },dNSSEC : { load: async () => (await import('../aws/route53/DNSSEC')).dNSSEC },healthCheck : { load: async () => (await import('../aws/route53/HealthCheck')).healthCheck },hostedZone : { load: async () => (await import('../aws/route53/HostedZone')).hostedZone },keySigningKey : { load: async () => (await import('../aws/route53/KeySigningKey')).keySigningKey },recordSet : { load: async () => (await import('../aws/route53/RecordSet')).recordSet },recordSetGroup : { load: async () => (await import('../aws/route53/RecordSetGroup')).recordSetGroup }},
route53resolver : {
firewallDomainList : { load: async () => (await import('../aws/route53resolver/FirewallDomainList')).firewallDomainList },firewallRuleGroup : { load: async () => (await import('../aws/route53resolver/FirewallRuleGroup')).firewallRuleGroup },firewallRuleGroupAssociation : { load: async () => (await import('../aws/route53resolver/FirewallRuleGroupAssociation')).firewallRuleGroupAssociation },outpostResolver : { load: async () => (await import('../aws/route53resolver/OutpostResolver')).outpostResolver },resolverConfig : { load: async () => (await import('../aws/route53resolver/ResolverConfig')).resolverConfig },resolverDNSSECConfig : { load: async () => (await import('../aws/route53resolver/ResolverDNSSECConfig')).resolverDNSSECConfig },resolverEndpoint : { load: async () => (await import('../aws/route53resolver/ResolverEndpoint')).resolverEndpoint },resolverQueryLoggingConfig : { load: async () => (await import('../aws/route53resolver/ResolverQueryLoggingConfig')).resolverQueryLoggingConfig },resolverQueryLoggingConfigAssociation : { load: async () => (await import('../aws/route53resolver/ResolverQueryLoggingConfigAssociation')).resolverQueryLoggingConfigAssociation },resolverRule : { load: async () => (await import('../aws/route53resolver/ResolverRule')).resolverRule },resolverRuleAssociation : { load: async () => (await import('../aws/route53resolver/ResolverRuleAssociation')).resolverRuleAssociation }},
s3 : {
accessPoint : { load: async () => (await import('../aws/s3/AccessPoint')).accessPoint },bucket : { load: async () => (await import('../aws/s3/Bucket')).bucket },bucketPolicy : { load: async () => (await import('../aws/s3/BucketPolicy')).bucketPolicy },multiRegionAccessPoint : { load: async () => (await import('../aws/s3/MultiRegionAccessPoint')).multiRegionAccessPoint },multiRegionAccessPointPolicy : { load: async () => (await import('../aws/s3/MultiRegionAccessPointPolicy')).multiRegionAccessPointPolicy },storageLens : { load: async () => (await import('../aws/s3/StorageLens')).storageLens }},
s3objectlambda : {
accessPoint : { load: async () => (await import('../aws/s3objectlambda/AccessPoint')).accessPoint },accessPointPolicy : { load: async () => (await import('../aws/s3objectlambda/AccessPointPolicy')).accessPointPolicy }},
s3outposts : {
accessPoint : { load: async () => (await import('../aws/s3outposts/AccessPoint')).accessPoint },bucket : { load: async () => (await import('../aws/s3outposts/Bucket')).bucket },bucketPolicy : { load: async () => (await import('../aws/s3outposts/BucketPolicy')).bucketPolicy },endpoint : { load: async () => (await import('../aws/s3outposts/Endpoint')).endpoint }},
sdb : {
domain : { load: async () => (await import('../aws/sdb/Domain')).domain }},
ses : {
configurationSet : { load: async () => (await import('../aws/ses/ConfigurationSet')).configurationSet },configurationSetEventDestination : { load: async () => (await import('../aws/ses/ConfigurationSetEventDestination')).configurationSetEventDestination },contactList : { load: async () => (await import('../aws/ses/ContactList')).contactList },dedicatedIpPool : { load: async () => (await import('../aws/ses/DedicatedIpPool')).dedicatedIpPool },emailIdentity : { load: async () => (await import('../aws/ses/EmailIdentity')).emailIdentity },receiptFilter : { load: async () => (await import('../aws/ses/ReceiptFilter')).receiptFilter },receiptRule : { load: async () => (await import('../aws/ses/ReceiptRule')).receiptRule },receiptRuleSet : { load: async () => (await import('../aws/ses/ReceiptRuleSet')).receiptRuleSet },template : { load: async () => (await import('../aws/ses/Template')).template },vdmAttributes : { load: async () => (await import('../aws/ses/VdmAttributes')).vdmAttributes }},
sns : {
subscription : { load: async () => (await import('../aws/sns/Subscription')).subscription },topic : { load: async () => (await import('../aws/sns/Topic')).topic },topicInlinePolicy : { load: async () => (await import('../aws/sns/TopicInlinePolicy')).topicInlinePolicy },topicPolicy : { load: async () => (await import('../aws/sns/TopicPolicy')).topicPolicy }},
sqs : {
queue : { load: async () => (await import('../aws/sqs/Queue')).queue },queueInlinePolicy : { load: async () => (await import('../aws/sqs/QueueInlinePolicy')).queueInlinePolicy },queuePolicy : { load: async () => (await import('../aws/sqs/QueuePolicy')).queuePolicy }},
ssm : {
association : { load: async () => (await import('../aws/ssm/Association')).association },document : { load: async () => (await import('../aws/ssm/Document')).document },maintenanceWindow : { load: async () => (await import('../aws/ssm/MaintenanceWindow')).maintenanceWindow },maintenanceWindowTarget : { load: async () => (await import('../aws/ssm/MaintenanceWindowTarget')).maintenanceWindowTarget },maintenanceWindowTask : { load: async () => (await import('../aws/ssm/MaintenanceWindowTask')).maintenanceWindowTask },parameter : { load: async () => (await import('../aws/ssm/Parameter')).parameter },patchBaseline : { load: async () => (await import('../aws/ssm/PatchBaseline')).patchBaseline },resourceDataSync : { load: async () => (await import('../aws/ssm/ResourceDataSync')).resourceDataSync },resourcePolicy : { load: async () => (await import('../aws/ssm/ResourcePolicy')).resourcePolicy }},
ssmcontacts : {
contact : { load: async () => (await import('../aws/ssmcontacts/Contact')).contact },contactChannel : { load: async () => (await import('../aws/ssmcontacts/ContactChannel')).contactChannel },plan : { load: async () => (await import('../aws/ssmcontacts/Plan')).plan },rotation : { load: async () => (await import('../aws/ssmcontacts/Rotation')).rotation }},
ssmincidents : {
replicationSet : { load: async () => (await import('../aws/ssmincidents/ReplicationSet')).replicationSet },responsePlan : { load: async () => (await import('../aws/ssmincidents/ResponsePlan')).responsePlan }},
sso : {
assignment : { load: async () => (await import('../aws/sso/Assignment')).assignment },instanceAccessControlAttributeConfiguration : { load: async () => (await import('../aws/sso/InstanceAccessControlAttributeConfiguration')).instanceAccessControlAttributeConfiguration },permissionSet : { load: async () => (await import('../aws/sso/PermissionSet')).permissionSet }},
sagemaker : {
app : { load: async () => (await import('../aws/sagemaker/App')).app },appImageConfig : { load: async () => (await import('../aws/sagemaker/AppImageConfig')).appImageConfig },codeRepository : { load: async () => (await import('../aws/sagemaker/CodeRepository')).codeRepository },dataQualityJobDefinition : { load: async () => (await import('../aws/sagemaker/DataQualityJobDefinition')).dataQualityJobDefinition },device : { load: async () => (await import('../aws/sagemaker/Device')).device },deviceFleet : { load: async () => (await import('../aws/sagemaker/DeviceFleet')).deviceFleet },domain : { load: async () => (await import('../aws/sagemaker/Domain')).domain },endpoint : { load: async () => (await import('../aws/sagemaker/Endpoint')).endpoint },endpointConfig : { load: async () => (await import('../aws/sagemaker/EndpointConfig')).endpointConfig },featureGroup : { load: async () => (await import('../aws/sagemaker/FeatureGroup')).featureGroup },image : { load: async () => (await import('../aws/sagemaker/Image')).image },imageVersion : { load: async () => (await import('../aws/sagemaker/ImageVersion')).imageVersion },inferenceExperiment : { load: async () => (await import('../aws/sagemaker/InferenceExperiment')).inferenceExperiment },model : { load: async () => (await import('../aws/sagemaker/Model')).model },modelBiasJobDefinition : { load: async () => (await import('../aws/sagemaker/ModelBiasJobDefinition')).modelBiasJobDefinition },modelCard : { load: async () => (await import('../aws/sagemaker/ModelCard')).modelCard },modelExplainabilityJobDefinition : { load: async () => (await import('../aws/sagemaker/ModelExplainabilityJobDefinition')).modelExplainabilityJobDefinition },modelPackage : { load: async () => (await import('../aws/sagemaker/ModelPackage')).modelPackage },modelPackageGroup : { load: async () => (await import('../aws/sagemaker/ModelPackageGroup')).modelPackageGroup },modelQualityJobDefinition : { load: async () => (await import('../aws/sagemaker/ModelQualityJobDefinition')).modelQualityJobDefinition },monitoringSchedule : { load: async () => (await import('../aws/sagemaker/MonitoringSchedule')).monitoringSchedule },notebookInstance : { load: async () => (await import('../aws/sagemaker/NotebookInstance')).notebookInstance },notebookInstanceLifecycleConfig : { load: async () => (await import('../aws/sagemaker/NotebookInstanceLifecycleConfig')).notebookInstanceLifecycleConfig },pipeline : { load: async () => (await import('../aws/sagemaker/Pipeline')).pipeline },project : { load: async () => (await import('../aws/sagemaker/Project')).project },space : { load: async () => (await import('../aws/sagemaker/Space')).space },userProfile : { load: async () => (await import('../aws/sagemaker/UserProfile')).userProfile },workteam : { load: async () => (await import('../aws/sagemaker/Workteam')).workteam }},
scheduler : {
schedule : { load: async () => (await import('../aws/scheduler/Schedule')).schedule },scheduleGroup : { load: async () => (await import('../aws/scheduler/ScheduleGroup')).scheduleGroup }},
secretsmanager : {
resourcePolicy : { load: async () => (await import('../aws/secretsmanager/ResourcePolicy')).resourcePolicy },rotationSchedule : { load: async () => (await import('../aws/secretsmanager/RotationSchedule')).rotationSchedule },secret : { load: async () => (await import('../aws/secretsmanager/Secret')).secret },secretTargetAttachment : { load: async () => (await import('../aws/secretsmanager/SecretTargetAttachment')).secretTargetAttachment }},
securityhub : {
automationRule : { load: async () => (await import('../aws/securityhub/AutomationRule')).automationRule },hub : { load: async () => (await import('../aws/securityhub/Hub')).hub },standard : { load: async () => (await import('../aws/securityhub/Standard')).standard }},
servicecatalog : {
acceptedPortfolioShare : { load: async () => (await import('../aws/servicecatalog/AcceptedPortfolioShare')).acceptedPortfolioShare },cloudFormationProduct : { load: async () => (await import('../aws/servicecatalog/CloudFormationProduct')).cloudFormationProduct },cloudFormationProvisionedProduct : { load: async () => (await import('../aws/servicecatalog/CloudFormationProvisionedProduct')).cloudFormationProvisionedProduct },launchNotificationConstraint : { load: async () => (await import('../aws/servicecatalog/LaunchNotificationConstraint')).launchNotificationConstraint },launchRoleConstraint : { load: async () => (await import('../aws/servicecatalog/LaunchRoleConstraint')).launchRoleConstraint },launchTemplateConstraint : { load: async () => (await import('../aws/servicecatalog/LaunchTemplateConstraint')).launchTemplateConstraint },portfolio : { load: async () => (await import('../aws/servicecatalog/Portfolio')).portfolio },portfolioPrincipalAssociation : { load: async () => (await import('../aws/servicecatalog/PortfolioPrincipalAssociation')).portfolioPrincipalAssociation },portfolioProductAssociation : { load: async () => (await import('../aws/servicecatalog/PortfolioProductAssociation')).portfolioProductAssociation },portfolioShare : { load: async () => (await import('../aws/servicecatalog/PortfolioShare')).portfolioShare },resourceUpdateConstraint : { load: async () => (await import('../aws/servicecatalog/ResourceUpdateConstraint')).resourceUpdateConstraint },serviceAction : { load: async () => (await import('../aws/servicecatalog/ServiceAction')).serviceAction },serviceActionAssociation : { load: async () => (await import('../aws/servicecatalog/ServiceActionAssociation')).serviceActionAssociation },stackSetConstraint : { load: async () => (await import('../aws/servicecatalog/StackSetConstraint')).stackSetConstraint },tagOption : { load: async () => (await import('../aws/servicecatalog/TagOption')).tagOption },tagOptionAssociation : { load: async () => (await import('../aws/servicecatalog/TagOptionAssociation')).tagOptionAssociation }},
servicecatalogappregistry : {
application : { load: async () => (await import('../aws/servicecatalogappregistry/Application')).application },attributeGroup : { load: async () => (await import('../aws/servicecatalogappregistry/AttributeGroup')).attributeGroup },attributeGroupAssociation : { load: async () => (await import('../aws/servicecatalogappregistry/AttributeGroupAssociation')).attributeGroupAssociation },resourceAssociation : { load: async () => (await import('../aws/servicecatalogappregistry/ResourceAssociation')).resourceAssociation }},
servicediscovery : {
httpNamespace : { load: async () => (await import('../aws/servicediscovery/HttpNamespace')).httpNamespace },instance : { load: async () => (await import('../aws/servicediscovery/Instance')).instance },privateDnsNamespace : { load: async () => (await import('../aws/servicediscovery/PrivateDnsNamespace')).privateDnsNamespace },publicDnsNamespace : { load: async () => (await import('../aws/servicediscovery/PublicDnsNamespace')).publicDnsNamespace },service : { load: async () => (await import('../aws/servicediscovery/Service')).service }},
shield : {
dRTAccess : { load: async () => (await import('../aws/shield/DRTAccess')).dRTAccess },proactiveEngagement : { load: async () => (await import('../aws/shield/ProactiveEngagement')).proactiveEngagement },protection : { load: async () => (await import('../aws/shield/Protection')).protection },protectionGroup : { load: async () => (await import('../aws/shield/ProtectionGroup')).protectionGroup }},
signer : {
profilePermission : { load: async () => (await import('../aws/signer/ProfilePermission')).profilePermission },signingProfile : { load: async () => (await import('../aws/signer/SigningProfile')).signingProfile }},
simspaceweaver : {
simulation : { load: async () => (await import('../aws/simspaceweaver/Simulation')).simulation }},
stepfunctions : {
activity : { load: async () => (await import('../aws/stepfunctions/Activity')).activity },stateMachine : { load: async () => (await import('../aws/stepfunctions/StateMachine')).stateMachine },stateMachineAlias : { load: async () => (await import('../aws/stepfunctions/StateMachineAlias')).stateMachineAlias },stateMachineVersion : { load: async () => (await import('../aws/stepfunctions/StateMachineVersion')).stateMachineVersion }},
supportapp : {
accountAlias : { load: async () => (await import('../aws/supportapp/AccountAlias')).accountAlias },slackChannelConfiguration : { load: async () => (await import('../aws/supportapp/SlackChannelConfiguration')).slackChannelConfiguration },slackWorkspaceConfiguration : { load: async () => (await import('../aws/supportapp/SlackWorkspaceConfiguration')).slackWorkspaceConfiguration }},
synthetics : {
canary : { load: async () => (await import('../aws/synthetics/Canary')).canary },group : { load: async () => (await import('../aws/synthetics/Group')).group }},
systemsmanagersap : {
application : { load: async () => (await import('../aws/systemsmanagersap/Application')).application }},
timestream : {
database : { load: async () => (await import('../aws/timestream/Database')).database },scheduledQuery : { load: async () => (await import('../aws/timestream/ScheduledQuery')).scheduledQuery },table : { load: async () => (await import('../aws/timestream/Table')).table }},
transfer : {
agreement : { load: async () => (await import('../aws/transfer/Agreement')).agreement },certificate : { load: async () => (await import('../aws/transfer/Certificate')).certificate },connector : { load: async () => (await import('../aws/transfer/Connector')).connector },profile : { load: async () => (await import('../aws/transfer/Profile')).profile },server : { load: async () => (await import('../aws/transfer/Server')).server },user : { load: async () => (await import('../aws/transfer/User')).user },workflow : { load: async () => (await import('../aws/transfer/Workflow')).workflow }},
verifiedpermissions : {
identitySource : { load: async () => (await import('../aws/verifiedpermissions/IdentitySource')).identitySource },policy : { load: async () => (await import('../aws/verifiedpermissions/Policy')).policy },policyStore : { load: async () => (await import('../aws/verifiedpermissions/PolicyStore')).policyStore },policyTemplate : { load: async () => (await import('../aws/verifiedpermissions/PolicyTemplate')).policyTemplate }},
vpclattice : {
accessLogSubscription : { load: async () => (await import('../aws/vpclattice/AccessLogSubscription')).accessLogSubscription },authPolicy : { load: async () => (await import('../aws/vpclattice/AuthPolicy')).authPolicy },listener : { load: async () => (await import('../aws/vpclattice/Listener')).listener },resourcePolicy : { load: async () => (await import('../aws/vpclattice/ResourcePolicy')).resourcePolicy },rule : { load: async () => (await import('../aws/vpclattice/Rule')).rule },service : { load: async () => (await import('../aws/vpclattice/Service')).service },serviceNetwork : { load: async () => (await import('../aws/vpclattice/ServiceNetwork')).serviceNetwork },serviceNetworkServiceAssociation : { load: async () => (await import('../aws/vpclattice/ServiceNetworkServiceAssociation')).serviceNetworkServiceAssociation },serviceNetworkVpcAssociation : { load: async () => (await import('../aws/vpclattice/ServiceNetworkVpcAssociation')).serviceNetworkVpcAssociation },targetGroup : { load: async () => (await import('../aws/vpclattice/TargetGroup')).targetGroup }},
waf : {
byteMatchSet : { load: async () => (await import('../aws/waf/ByteMatchSet')).byteMatchSet },iPSet : { load: async () => (await import('../aws/waf/IPSet')).iPSet },rule : { load: async () => (await import('../aws/waf/Rule')).rule },sizeConstraintSet : { load: async () => (await import('../aws/waf/SizeConstraintSet')).sizeConstraintSet },sqlInjectionMatchSet : { load: async () => (await import('../aws/waf/SqlInjectionMatchSet')).sqlInjectionMatchSet },webACL : { load: async () => (await import('../aws/waf/WebACL')).webACL },xssMatchSet : { load: async () => (await import('../aws/waf/XssMatchSet')).xssMatchSet }},
wafregional : {
byteMatchSet : { load: async () => (await import('../aws/wafregional/ByteMatchSet')).byteMatchSet },geoMatchSet : { load: async () => (await import('../aws/wafregional/GeoMatchSet')).geoMatchSet },iPSet : { load: async () => (await import('../aws/wafregional/IPSet')).iPSet },rateBasedRule : { load: async () => (await import('../aws/wafregional/RateBasedRule')).rateBasedRule },regexPatternSet : { load: async () => (await import('../aws/wafregional/RegexPatternSet')).regexPatternSet },rule : { load: async () => (await import('../aws/wafregional/Rule')).rule },sizeConstraintSet : { load: async () => (await import('../aws/wafregional/SizeConstraintSet')).sizeConstraintSet },sqlInjectionMatchSet : { load: async () => (await import('../aws/wafregional/SqlInjectionMatchSet')).sqlInjectionMatchSet },webACL : { load: async () => (await import('../aws/wafregional/WebACL')).webACL },webACLAssociation : { load: async () => (await import('../aws/wafregional/WebACLAssociation')).webACLAssociation },xssMatchSet : { load: async () => (await import('../aws/wafregional/XssMatchSet')).xssMatchSet }},
wafv2 : {
iPSet : { load: async () => (await import('../aws/wafv2/IPSet')).iPSet },loggingConfiguration : { load: async () => (await import('../aws/wafv2/LoggingConfiguration')).loggingConfiguration },regexPatternSet : { load: async () => (await import('../aws/wafv2/RegexPatternSet')).regexPatternSet },ruleGroup : { load: async () => (await import('../aws/wafv2/RuleGroup')).ruleGroup },webACL : { load: async () => (await import('../aws/wafv2/WebACL')).webACL },webACLAssociation : { load: async () => (await import('../aws/wafv2/WebACLAssociation')).webACLAssociation }},
workspaces : {
workspace : { load: async () => (await import('../aws/workspaces/Workspace')).workspace }},
xray : {
group : { load: async () => (await import('../aws/xray/Group')).group },resourcePolicy : { load: async () => (await import('../aws/xray/ResourcePolicy')).resourcePolicy },samplingRule : { load: async () => (await import('../aws/xray/SamplingRule')).samplingRule }},
cur : {
reportDefinition : { load: async () => (await import('../aws/cur/ReportDefinition')).reportDefinition }}},
alexa : {
ask : {
skill : { load: async () => (await import('../alexa/ask/Skill')).skill }}}};